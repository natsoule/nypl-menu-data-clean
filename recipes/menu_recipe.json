[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_case at index 3 based on column sponsor using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_case",
    "columnInsertIndex": 3,
    "baseColumnName": "sponsor",
    "expression": "jython:return value",
    "onError": "store-error"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_grel at index 4 based on column sponsor_case using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_grel",
    "columnInsertIndex": 4,
    "baseColumnName": "sponsor_case",
    "expression": "jython:return value",
    "onError": "store-error"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor_grel using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_grel",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_cluster at index 5 based on column sponsor_grel using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_cluster",
    "columnInsertIndex": 5,
    "baseColumnName": "sponsor_grel",
    "expression": "grel:value",
    "onError": "store-error"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE - ANTWERPEN - NY",
          "RED STAR LINE - ANTWERPEN NY",
          "RED STAR LINE - ANTWERPEN -NY",
          "RED STAR LINE -ANTWERPEN NY",
          "RED STAR LINE - ANTWERPEN.NY",
          "RED STAR LINE -ANTWERPEN - NY",
          "RED STAR LINE -ANTWERPEN -NY",
          "RED STAR LINE- ANTWERPEN -NY",
          "RED STAR LINE- ANTWERPEN NY"
        ],
        "to": "RED STAR LINE - ANTWERPEN - NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDDEUTSCHER LLOYD - BREMEN",
          "NORDDEUTSCHER LLOYD BREMEN;",
          "NORDDEUTSCHER LLOYD, BREMEN",
          "NORDDEUTSCHER LLOYD -BREMEN"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FIFTH AVENUE HOTEL",
          "FIFTH AVENUE HOTEL (?)",
          "FIFTH AVENUE HOTEL?",
          "(FIFTH AVENUE HOTEL?}",
          "FIFTH AVENUE HOTEL;"
        ],
        "to": "FIFTH AVENUE HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA - S.S.KASUGA",
          "NIPPON YUSEN KAISHA - S.S. KASUGA",
          "NIPPON YUSEN KAISHA -S.S.KASUGA",
          "NIPPON YUSEN KAISHA -SS KASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA - S.S.KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HAMBURG-AMERIKA LINIE",
          "HAMBURG AMERIKA LINIE",
          "HAMBURG - AMERIKA LINIE",
          "HAMBURG- AMERIKA LINIE"
        ],
        "to": "HAMBURG-AMERIKA LINIE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF ASTORIA",
          "WALDORF-ASTORIA",
          "WALDORF- ASTORIA",
          "WALDORF-ASTORIA?"
        ],
        "to": "WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA - S.S. KOBE MARU",
          "NIPPON YUSEN KAISHA - S.S.KOBE MARU",
          "NIPPON YUSEN KAISHA -S.S.KOBE MARU",
          "NIPPPON YUSEN KAISHA - S.S. KOBE MARU"
        ],
        "to": "NIPPON YUSEN KAISHA - S.S. KOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE - S.S.FRIESLAND",
          "RED STAR LINE SS FRIESLAND",
          "RED STAR LINE-SS FRIESLAND"
        ],
        "to": "RED STAR LINE - S.S.FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CAFETERIA LUNCH",
          "CAFETERIA - LUNCH",
          "CAFETERIA-LUNCH"
        ],
        "to": "CAFETERIA LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CIE GLE TRANSATLANTIQUE",
          "CIE. GLE. TRANSATLANTIQUE",
          "CIE.GLE. TRANSATLANTIQUE"
        ],
        "to": "CIE GLE TRANSATLANTIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRIENDLY SONS OF ST. PATRICK",
          "FRIENDLY SONS OF ST PATRICK",
          "FRIENDLY SONS OF ST.PATRICK"
        ],
        "to": "FRIENDLY SONS OF ST. PATRICK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. NEW YORK",
          "USMS NEW YORK",
          "U.S.M.S NEW YORK"
        ],
        "to": "U.S.M.S. NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENZIES HOTEL",
          "MENZIE'S HOTEL",
          "MENZIES'HOTEL"
        ],
        "to": "MENZIES HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESTAURANT NAME AND/OR LOCATION NOT GIVEN",
          "RESTAURANT NAME AND/OR LOCATION NOT GIVEN]",
          "[RESTAURANT NAME AND/OR LOCATION NOT GIVEN"
        ],
        "to": "RESTAURANT NAME AND/OR LOCATION NOT GIVEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS",
          "DELMONICO'S",
          "DELMONICOS."
        ],
        "to": "DELMONICOS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE MERCHANT'S CLUB",
          "THE MERCHANTS CLUB",
          "THE MERCHANTS' CLUB"
        ],
        "to": "THE MERCHANT'S CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE - S.S.WESTERNLAND",
          "RED STAR LINE - SS WESTERNLAND",
          "RED STAR LINE S.S.WESTERNLAND"
        ],
        "to": "RED STAR LINE - S.S.WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RIGGS'",
          "RIGG'S",
          "RIGGS"
        ],
        "to": "RIGGS'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. RALEIGH",
          "U.S.S.RALEIGH",
          "U.S.S.S.RALEIGH"
        ],
        "to": "U.S.S. RALEIGH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO. - S.S. ATHABASCA",
          "CANADIAN PACIFIC RAILWAY CO. - S.S.ATHABASCA",
          "CANADIAN PACIFIC RAILWAY CO.- S.S.ATHABASCA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO. - S.S. ATHABASCA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDEUTSCHER LLOYD BREMEN",
          "NORDEUTSCHER LLOYD, BREMEN",
          "NORDEUTSCHER LLOYD - BREMEN"
        ],
        "to": "NORDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH & MC NELLS",
          "SMITH & MCNELL'S",
          "SMITH & MCNELLS"
        ],
        "to": "SMITH & MC NELLS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFBRAU HAUS",
          "HOFBRAUHAUS",
          "HOF BRAU HAUS"
        ],
        "to": "HOFBRAU HAUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA - S.S.NASUGA",
          "NIPPON YUSEN KAISHA - S.S. NASUGA",
          "NIPPON YUSEN KAISHA -S.S.NASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA - S.S.NASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. NEW YORK",
          "U.S.S. NEW YORK",
          "U.S.S. NEW YORK (?)"
        ],
        "to": "U. S. S. NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EDWARD F. LANG'S LADIES AND GENTS LUNCH ROOM AND RESTAURANT",
          "EDWARD F. LANG'S LADIES' AND GENT'S LUNCH ROOM AND RESTAURANT",
          "EDWARD F. LANG'S LADIES' AND GENT'S LUNCH ROOM AND RESTAURANT;"
        ],
        "to": "EDWARD F. LANG'S LADIES AND GENTS LUNCH ROOM AND RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "USMS",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMERICAN MEDICAL EDITORS' ASSOCIATION",
          "AMERICAN MEDICAL EDITOR'S ASSOCIATION",
          "AMERICAN MEDICAL EDITORS ASSOCIATION"
        ],
        "to": "AMERICAN MEDICAL EDITORS' ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHILDS",
          "CHILDS'",
          "CHILD'S"
        ],
        "to": "CHILDS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. OCEANIC",
          "RMS OCEANIC",
          "R.M.S.OCEANIC"
        ],
        "to": "R.M.S. OCEANIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCHANTS' CLUB",
          "MERCHANT'S CLUB",
          "MERCHANTS CLUB"
        ],
        "to": "MERCHANTS' CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIETA LA PIEMONTESE",
          "SOCIETA'LA PIEMONTESE"
        ],
        "to": "SOCIETA LA PIEMONTESE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP COMPANY -S.S.ZEALANDER",
          "OCEANIC STEAMSHIP COMPANY - S.S.ZEALANDER"
        ],
        "to": "OCEANIC STEAMSHIP COMPANY -S.S.ZEALANDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP CO. - SONOMA",
          "OCEANIC STEAMSHIP CO. _ SONOMA"
        ],
        "to": "OCEANIC STEAMSHIP CO. - SONOMA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DUPONT",
          "HOTEL DU PONT"
        ],
        "to": "HOTEL DUPONT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MOUQUIN RESTAURANT AND WINE CO",
          "MOUQUIN RESTAURANT AND WINE CO."
        ],
        "to": "MOUQUIN RESTAURANT AND WINE CO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A.H. MEYER RATHSKELLER",
          "A.H.MEYER RATHSKELLER"
        ],
        "to": "A.H. MEYER RATHSKELLER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS ST LOUIS",
          "U.S.M.S. ST. LOUIS"
        ],
        "to": "USMS ST LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LAUREL IN THE PINES",
          "LAUREL-IN-THE-PINES"
        ],
        "to": "LAUREL IN THE PINES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP CO. - SIERRA",
          "OCEANIC STEAMSHIP CO.- SIERRA"
        ],
        "to": "OCEANIC STEAMSHIP CO. - SIERRA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ELKS CLUB HOUSE",
          "ELKS' CLUB HOUSE"
        ],
        "to": "ELKS CLUB HOUSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S. S. PRESIDENT WILSON",
          "S.S. PRESIDENT WILSON"
        ],
        "to": "S. S. PRESIDENT WILSON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD HOTEL",
          "THE NEW WILLARD HOTEL."
        ],
        "to": "THE NEW WILLARD HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUBEN'S",
          "REUBEN'S."
        ],
        "to": "REUBEN'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(EMPEROR NICHOLAS II",
          "EMPEROR NICHOLAS II"
        ],
        "to": "(EMPEROR NICHOLAS II"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE - STRATFORD",
          "BELLEVUE-STRATFORD"
        ],
        "to": "BELLEVUE - STRATFORD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNITED AIR LINES",
          "UNITED AIRLINES"
        ],
        "to": "UNITED AIR LINES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESAURANT AND CAFE",
          "FLATIRON RESAURANT AND CAFE"
        ],
        "to": "FLAT IRON RESAURANT AND CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "? CLUB",
          "CLUB"
        ],
        "to": "? CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. GEORGE'S SOCIETY",
          "ST. GEORGES SOCIETY"
        ],
        "to": "ST. GEORGE'S SOCIETY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ENGLAND SHORTHAND REPORTER'S ASSOCIATION",
          "NEW ENGLAND SHORTHAND REPORTERS' ASSOCIATION"
        ],
        "to": "NEW ENGLAND SHORTHAND REPORTER'S ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WABASH RAILWAY COMPANY",
          "WABASH [RAILWAY COMPANY]"
        ],
        "to": "WABASH RAILWAY COMPANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY PLAZA",
          "COPLEY-PLAZA"
        ],
        "to": "COPLEY PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHANLEY'S",
          "SHANLEYS"
        ],
        "to": "SHANLEY'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE STRATFORD HOTEL",
          "BELLEVUE-STRATFORD HOTEL"
        ],
        "to": "BELLEVUE STRATFORD HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUNDESHAUS RESTAURANT",
          "BUNDESHAUSRESTAURANT"
        ],
        "to": "BUNDESHAUS RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BRITISH SCHOOLS AND UNIVERSITIES CLUB OF NEW YORK",
          "BRITISHSCHOOLS AND UNIVERSITIES CLUB OF NEW YORK"
        ],
        "to": "BRITISH SCHOOLS AND UNIVERSITIES CLUB OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMSTERDAM",
          "S.S.AMSTERDAM"
        ],
        "to": "S.S. AMSTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO. - S.S. ALBERTA",
          "CANADIAN PACIFIC RAILWAY CO. - S.S.ALBERTA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO. - S.S. ALBERTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SCHWARZWALDER'S NATUR WEINHAUS",
          "SCHWARZWALDERS NATUR WEINHAUS"
        ],
        "to": "SCHWARZWALDER'S NATUR WEINHAUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAQUEBOT \\FRANCE\\\"\"",
          "PAQUEBOT FRANCE"
        ],
        "to": "PAQUEBOT \\FRANCE\\\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CAFÉ DES BEAUX ARTS",
          "CAFÉ DES BEAUX-ARTS"
        ],
        "to": "CAFÉ DES BEAUX ARTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CUNARD LINE-R.M.S. PAVONIA",
          "CUNARD LINE R.M.S. PAVONIA"
        ],
        "to": "CUNARD LINE-R.M.S. PAVONIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHILDS' LUNCH ROOMS",
          "CHILD'S LUNCH ROOMS"
        ],
        "to": "CHILDS' LUNCH ROOMS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE - S.S. SOUTHWARK",
          "RED STAR LINE - S.S.SOUTHWARK"
        ],
        "to": "RED STAR LINE - S.S. SOUTHWARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "IMPERIAL",
          "IMPERIAL (?)"
        ],
        "to": "IMPERIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BANKERS' CLUB OF CHICAGO",
          "BANKERS CLUB OF CHICAGO"
        ],
        "to": "BANKERS' CLUB OF CHICAGO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. SAN FRANCISCO",
          "U.S.S.SAN FRANCISCO"
        ],
        "to": "U.S.S. SAN FRANCISCO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ROUND TABLE",
          "THE ROUNDTABLE"
        ],
        "to": "THE ROUND TABLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TOYO KISEN KAISHA - HONG KONG MARU",
          "TOYO KISEN KAISHA -HONG KONG MARU"
        ],
        "to": "TOYO KISEN KAISHA - HONG KONG MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL KNICKERBOCKER",
          "HOTEL KNICKERBOCKER (?)"
        ],
        "to": "HOTEL KNICKERBOCKER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY'S",
          "SHERRYS"
        ],
        "to": "SHERRY'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. GEORGE'S SOCIETY OF NEW YORK",
          "ST.GEORGE'S SOCIETY OF NEW YORK"
        ],
        "to": "ST. GEORGE'S SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP COMPANY - SONOMA",
          "OCEANIC STEAMSHIP COMPANY _ SONOMA"
        ],
        "to": "OCEANIC STEAMSHIP COMPANY - SONOMA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK STATE HOTEL ASSOCIATION",
          "NEW-YORK STATE HOTEL ASSOCIATION"
        ],
        "to": "NEW YORK STATE HOTEL ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUSINESS MEN'S LEAGUE OF ST. LOUIS",
          "BUSINESS MEN'S LEAGUE OF ST.LOUIS"
        ],
        "to": "BUSINESS MEN'S LEAGUE OF ST. LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIG N'WHISTLE",
          "PIG'N WHISTLE"
        ],
        "to": "PIG N'WHISTLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. REGIS HOTEL",
          "ST.REGIS HOTEL"
        ],
        "to": "ST. REGIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES COMMANDERY OF THE STATE OF MINNESOTA",
          "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES. COMMANDERY OF THE STATE OF MINNESOTA"
        ],
        "to": "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES COMMANDERY OF THE STATE OF MINNESOTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S NEW AMSTERDAM",
          "S.S. NEW AMSTERDAM"
        ],
        "to": "S.S NEW AMSTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE - ANTWERPEN -NEW YORK",
          "RED STAR LINE ANTWERPEN-NEW YORK"
        ],
        "to": "RED STAR LINE - ANTWERPEN -NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RIGG'S TWENTIETH STREET RESTAURANT",
          "RIGGS' TWENTIETH STREET RESTAURANT"
        ],
        "to": "RIGG'S TWENTIETH STREET RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. WYOMING",
          "U.S.S. WYOMING"
        ],
        "to": "U. S. S. WYOMING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PENN. RR - PULLMAN DINING CAR SERVICE",
          "PENN RR - PULLMAN DINING CAR SERVICE"
        ],
        "to": "PENN. RR - PULLMAN DINING CAR SERVICE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\\THE MANOR\\\"\"",
          "THE MANOR"
        ],
        "to": "THE MANOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMERICAN BANKERS ASSOCIATION",
          "AMERICAN BANKERS' ASSOCIATION"
        ],
        "to": "AMERICAN BANKERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK",
          "SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
        ],
        "to": "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALTA VISTA HOTEL",
          "ALTA VISTA HOTEL (?)"
        ],
        "to": "ALTA VISTA HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. PARTHIA",
          "R.M.S. \"PARTHIA\"\"\""
        ],
        "to": "R.M.S. PARTHIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GROCERS HALL",
          "GROCERS' HALL"
        ],
        "to": "GROCERS HALL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROGER'S RESTAURANT",
          "ROGERS'RESTAURANT"
        ],
        "to": "ROGER'S RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP COMPANY - SIERRA",
          "OCEANIC STEAMSHIP COMPANY -SIERRA"
        ],
        "to": "OCEANIC STEAMSHIP COMPANY - SIERRA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WILLARD'S HOTEL",
          "WILLARDS HOTEL"
        ],
        "to": "WILLARD'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "O.D.",
          "O. D."
        ],
        "to": "O.D."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "B&O BLUE LINE",
          "B.& O. BLUE LINE"
        ],
        "to": "B&O BLUE LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEANIC STEAMSHIP CO. - S.S.ZEALANDIA",
          "OCEANIC STEAMSHIP CO. S.S.ZEALANDIA"
        ],
        "to": "OCEANIC STEAMSHIP CO. - S.S.ZEALANDIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.(?)",
          "RG"
        ],
        "to": "R.G.(?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. ANDREW'S SOCIETY OF THE STATE OF NEW YORK",
          "ST.ANDREWS SOCIETY OF THE STATE OF NEW YORK"
        ],
        "to": "ST. ANDREW'S SOCIETY OF THE STATE OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA - S.S.KINSHIN MARU",
          "NIPPON YUSEN KAISHA -S.S.KINSHIN MARU"
        ],
        "to": "NIPPON YUSEN KAISHA - S.S.KINSHIN MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK",
          "THE NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
        ],
        "to": "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL LA SALLE",
          "HOTEL LASALLE"
        ],
        "to": "HOTEL LA SALLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. CHARLES HOTEL",
          "ST CHARLES HOTEL"
        ],
        "to": "ST. CHARLES HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. FRANCIS HOTEL",
          "ST.FRANCIS HOTEL"
        ],
        "to": "ST. FRANCIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SANTA FE ROUTE",
          "SANTA FE' ROUTE"
        ],
        "to": "SANTA FE ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCHANT'S CLUB OF BOSTON",
          "MERCHANTS' CLUB OF BOSTON"
        ],
        "to": "MERCHANT'S CLUB OF BOSTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ADAMS' RESTAURANT",
          "ADAM'S RESTAURANT"
        ],
        "to": "ADAMS' RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANCIENT AND HONORABLE ARTILLERY CO OF MASSACHUSETTS",
          "ANCIENT AND HONORABLE ARTILLERY CO. OF MASSACHUSETTS"
        ],
        "to": "ANCIENT AND HONORABLE ARTILLERY CO OF MASSACHUSETTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORF ASTORIA",
          "THE WALDORF-ASTORIA"
        ],
        "to": "THE WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAQUEBOT LIBERTE",
          "PAQUEBOT \\LIBERTE\\\"\""
        ],
        "to": "PAQUEBOT LIBERTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MCALPIN",
          "HOTEL MC ALPIN"
        ],
        "to": "HOTEL MCALPIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MEYER'S HOTEL",
          "MEYERS HOTEL"
        ],
        "to": "MEYER'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SIEGEL COOPER CO.",
          "SIEGEL-COOPER CO."
        ],
        "to": "SIEGEL COOPER CO."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY-PLAZA HOTEL",
          "COPLEY PLAZA HOTEL"
        ],
        "to": "COPLEY-PLAZA HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE",
          "RED STAR LINE -"
        ],
        "to": "RED STAR LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SIMPSON'S IN THE STRAND",
          "SIMPSON'S-IN-THE-STRAND"
        ],
        "to": "SIMPSON'S IN THE STRAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TYN-Y-COED",
          "TYNY COED"
        ],
        "to": "TYN-Y-COED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"QUEEN MARY\"\"\"",
          "R.M.S. \\QUEEN MARY\\\"\""
        ],
        "to": "R.M.S. \"QUEEN MARY\"\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. FLORIDA",
          "U.S.S. FLORIDA"
        ],
        "to": "U. S. S. FLORIDA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \\MAURETANIA\\\"\"",
          "R.M.S. MAURETANIA"
        ],
        "to": "R.M.S. \\MAURETANIA\\\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESTAURANT AND/OR LOCATION NOT GIVEN.",
          "RESTAURANT AND/OR LOCATION NOT GIVEN"
        ],
        "to": "RESTAURANT AND/OR LOCATION NOT GIVEN."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DU MUSEE",
          "HOTEL DU MUSEE'"
        ],
        "to": "HOTEL DU MUSEE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMERICA",
          "S.S.AMERICA"
        ],
        "to": "S.S. AMERICA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT & CAFE",
          "FLATIRON RESTAURANT & CAFE"
        ],
        "to": "FLAT IRON RESTAURANT & CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.PHILADELPHIA",
          "USMS PHILADELPHIA"
        ],
        "to": "U.S.M.S.PHILADELPHIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST. REGIS",
          "HOTEL ST.REGIS"
        ],
        "to": "HOTEL ST. REGIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER MENU, S. S. VADERLAND, MARCH 18TH, 1910.",
          "DINNER MENU, S.S. VADERLAND, MARCH 18TH, 1910."
        ],
        "to": "DINNER MENU, S. S. VADERLAND, MARCH 18TH, 1910."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIRATE'S HOUSE",
          "PIRATES' HOUSE"
        ],
        "to": "PIRATE'S HOUSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON HOTEL",
          "RITZ-CARLTON HOTEL"
        ],
        "to": "RITZ CARLTON HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WISCONSIN SOCIETY - SONS OF THE AMERICAN REVOLUTION",
          "WISCONSIN SOCIETY SONS OF THE AMERICAN REVOLUTION"
        ],
        "to": "WISCONSIN SOCIETY - SONS OF THE AMERICAN REVOLUTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MASTER PRINTERS ASSOCIATION",
          "MASTER PRINTERS' ASSOCIATION"
        ],
        "to": "MASTER PRINTERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ENGINEERS CLUB",
          "ENGINEERS' CLUB"
        ],
        "to": "ENGINEERS CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. MINNETONKA",
          "S.S. \"MINNETONKA\"\"\""
        ],
        "to": "S.S. MINNETONKA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COBBLE STONES",
          "THE COBBLESTONES"
        ],
        "to": "THE COBBLE STONES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"FREDERIK VIII\"",
          "S.S. FREDERIK VIII"
        ],
        "to": "S.S. \"FREDERIK VIII\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRAUNCES' TAVERN",
          "FRAUNCES TAVERN"
        ],
        "to": "FRAUNCES' TAVERN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. UNITED STATES",
          "S. S. UNITED STATES"
        ],
        "to": "S.S. UNITED STATES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON",
          "RITZ-CARLTON"
        ],
        "to": "RITZ CARLTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST.LOUIS CLUB",
          "ST. LOUIS CLUB"
        ],
        "to": "ST.LOUIS CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. DENIS HOTEL",
          "ST, DENIS HOTEL"
        ],
        "to": "ST. DENIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MET-LIFE BUILDING",
          "METLIFE BUILDING"
        ],
        "to": "MET-LIFE BUILDING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT",
          "FLATIRON RESTAURANT"
        ],
        "to": "FLAT IRON RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DOWN TOWN CLUB",
          "DOWNTOWN CLUB"
        ],
        "to": "DOWN TOWN CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE MERCHANT'S CLUB OF CHICAGO",
          "THE MERCHANTS CLUB OF CHICAGO"
        ],
        "to": "THE MERCHANT'S CLUB OF CHICAGO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CENTRAL & HUDSON RIVER R.R.",
          "NEW YORK CENTRAL & HUDSON RIVER R.R.."
        ],
        "to": "NEW YORK CENTRAL & HUDSON RIVER R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CENTURY CLUB",
          "CENTURY CLUB?"
        ],
        "to": "CENTURY CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CUNARD STEAM SHIP COMPANY LIMITED",
          "CUNARD STEAMSHIP COMPANY LIMITED"
        ],
        "to": "CUNARD STEAM SHIP COMPANY LIMITED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH & MC NELL",
          "SMITH & MCNELL"
        ],
        "to": "SMITH & MC NELL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO STATIONERS ASSOCIATION",
          "CHICAGOS STATIONERS ASSOCIATION"
        ],
        "to": "CHICAGO STATIONERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMERICAN SHIPPER",
          "S.S. \"AMERICAN SHIPPER\"\"\""
        ],
        "to": "S.S. AMERICAN SHIPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"ILE DE FRANCE\"\"\"",
          "S.S. ILE DE FRANCE"
        ],
        "to": "S.S. \"ILE DE FRANCE\"\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COSMOPOLITAN HOTEL",
          "COSMOPOLITAN... HOTEL"
        ],
        "to": "COSMOPOLITAN HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PROVINZIAL LIEDERTAFEL",
          "PROVINZIAL-LIEDERTAFEL"
        ],
        "to": "PROVINZIAL LIEDERTAFEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLONIAL HOTEL",
          "?COLONIAL HOTEL?"
        ],
        "to": "COLONIAL HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LA CRÉPE",
          "LA CRÊPE"
        ],
        "to": "LA CRÉPE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A.W. DENNETT",
          "A.W.DENNETT"
        ],
        "to": "A.W. DENNETT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "US ARMY - SUBSISTENCE DEPT.",
          "U.S. ARMY - SUBSISTENCE DEPT."
        ],
        "to": "US ARMY - SUBSISTENCE DEPT."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANCIENT ACCEPTED SCOTTISH RITE",
          "ANCIENT & ACCEPTED SCOTTISH RITE"
        ],
        "to": "ANCIENT ACCEPTED SCOTTISH RITE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COPLEY PLAZA",
          "HOTEL COPLEY-PLAZA"
        ],
        "to": "HOTEL COPLEY PLAZA"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column sponsor_uncertain at index 5 based on column sponsor_grel using expression jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "sponsor_uncertain",
    "columnInsertIndex": 5,
    "baseColumnName": "sponsor_grel",
    "expression": "jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_case at index 8 based on column event using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_case",
    "columnInsertIndex": 8,
    "baseColumnName": "event",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_grel at index 9 based on column event_case using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_grel",
    "columnInsertIndex": 9,
    "baseColumnName": "event_case",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event_grel using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_grel",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_cluster at index 10 based on column event_grel using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_cluster",
    "columnInsertIndex": 10,
    "baseColumnName": "event_grel",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER",
          "DINNER;",
          "DINNER (?)",
          "DINNER(?)",
          "DINNER?",
          "?DINNER?",
          "DINNER ?",
          "DINNER,"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH",
          "?LUNCH?",
          "LUNCH;",
          "LUNCH?",
          "LUNCH (?)",
          "LUNCH."
        ],
        "to": "LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST",
          "BREAKFAST;",
          "BREAKFAST (?)",
          "BREAKFAST ?",
          "BREAKFAST(?)"
        ],
        "to": "BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER",
          "SUPPER (?)",
          "SUPPER(?)",
          "SUPPER;"
        ],
        "to": "SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILY MENU;",
          "DAILY MENU?",
          "[DAILY] MENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH & DINNER",
          "LUNCH; DINNER",
          "?DINNER? - LUNCH?"
        ],
        "to": "LUNCH & DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK-BREAKFAST",
          "FRUHSTUCK/BREAKFAST",
          "FRUHSTUCK/BREAKFAST;"
        ],
        "to": "FRUHSTUCK-BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, DINNER",
          "DAILY DINNER MENU",
          "DAILY MENU; DINNER"
        ],
        "to": "DAILY MENU, DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A LA CARTE; DINNER",
          "DINNER A LA CARTE",
          "DINNER; A LA CARTE"
        ],
        "to": "A LA CARTE; DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH MENU",
          "DAILY MENU, LUNCH",
          "DAILY MENU; LUNCH"
        ],
        "to": "DAILY LUNCH MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH OR DINNER",
          "DINNER OR LUNCH",
          "LUNCH &/OR DINNER"
        ],
        "to": "LUNCH OR DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY DINNER",
          "ANNIVERSARY DINNER?",
          "ANNIVERSARY [DINNER]"
        ],
        "to": "ANNIVERSARY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN",
          "MITTAG-ESSEN",
          "MITTAGESSEN;"
        ],
        "to": "MITTAGESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP - LUNCHEON",
          "INSPECTION TRIP, LUNCHEON",
          "INSPECTION TRIP, LUNCHEON;"
        ],
        "to": "INSPECTION TRIP - LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BANQUET AND RECEPTION",
          "RECEPTION AND BANQUET"
        ],
        "to": "BANQUET AND RECEPTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TABLE D'HOTE DINNER",
          "DINNER TABLE D'HOTE"
        ],
        "to": "TABLE D'HOTE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARTE DU JOUR",
          "CARTE DU JOUR;"
        ],
        "to": "CARTE DU JOUR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AFTERNOON TEA",
          "AFTERNOON TEA ["
        ],
        "to": "AFTERNOON TEA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER - SECOND CABIN",
          "DINNER SECOND CABIN"
        ],
        "to": "DINNER - SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, DINNER",
          "INSPECTION TRIP, DINNER;"
        ],
        "to": "INSPECTION TRIP, DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN/DINNER",
          "MITTAGESSEN[DINNER]"
        ],
        "to": "MITTAGESSEN/DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINE LIST",
          "WINE LIST;"
        ],
        "to": "WINE LIST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER,SECOND CABIN",
          "DINNER-SECOND CABIN"
        ],
        "to": "DINNER,SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUNION",
          "?REUNION?"
        ],
        "to": "REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON TABLE D'HOTE",
          "TABLE D'HOTE LUNCHEON"
        ],
        "to": "LUNCHEON TABLE D'HOTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LADIES NIGHT",
          "LADIES' NIGHT"
        ],
        "to": "LADIES NIGHT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST AND SUPPER",
          "SUPPER AND BREAKFAST"
        ],
        "to": "BREAKFAST AND SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEDDING",
          "WEDDING(?)"
        ],
        "to": "WEDDING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTON'S BIRTHDAY BANQUET",
          "BANQUET (WASHINGTON'S BIRTHDAY?)"
        ],
        "to": "WASHINGTON'S BIRTHDAY BANQUET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABEND-ESSEN",
          "ABENDESSEN"
        ],
        "to": "ABEND-ESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENU",
          "MENU;"
        ],
        "to": "MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL DINNER",
          "ANNUAL DINNER?"
        ],
        "to": "ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST (?) HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON",
          "BREAKFAST HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
        ],
        "to": "BREAKFAST (?) HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER TO ABOVE",
          "DINNER TO ABOVE;"
        ],
        "to": "DINNER TO ABOVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH;",
          "DAILY LUNCH"
        ],
        "to": "DAILY LUNCH;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON A LA CARTE",
          "LUNCHEON, A LA CARTE"
        ],
        "to": "LUNCHEON A LA CARTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LINCOLN'S BIRTHDAY DINNER",
          "DINNER, LINCOLNS BIRTHDAY"
        ],
        "to": "LINCOLN'S BIRTHDAY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YEAR'S DINNER",
          "NEW YEARS DINNER"
        ],
        "to": "NEW YEAR'S DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FIFTH ANNUAL DINNER",
          "DINNER, FIFTH ANNUAL"
        ],
        "to": "FIFTH ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. VALENTINE'S DAY DINNER",
          "ST. VALENTINES DAY DINNER"
        ],
        "to": "ST. VALENTINE'S DAY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK/LUNCH",
          "FRUHSTUCK-LUNCH"
        ],
        "to": "FRUHSTUCK/LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YEAR'S DAY DINNER",
          "NEW YEARS DAY DINNER"
        ],
        "to": "NEW YEAR'S DAY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EIGHTH ANNUAL BANQUET",
          "EIGHTH ANNUAL BANQUET'"
        ],
        "to": "EIGHTH ANNUAL BANQUET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, BREAKFAST",
          "DAILY BREAKFAST MENU"
        ],
        "to": "DAILY MENU, BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, LUNCHEON",
          "DAILY LUNCHEON MENU"
        ],
        "to": "DAILY MENU, LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PRIVATE DINNER",
          "PRIVATE DINNER?"
        ],
        "to": "PRIVATE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON",
          "LUNCHEON;"
        ],
        "to": "LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, BREAKFAST",
          "INSPECTION TRIP - BREAKFAST"
        ],
        "to": "INSPECTION TRIP, BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN - DINNER",
          "MITTAGESSEN [DINNER]"
        ],
        "to": "MITTAGESSEN - DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH-DINNER",
          "LUNCH;DINNER"
        ],
        "to": "LUNCH-DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIDDAG/DINNER",
          "MIDDAG-DINNER"
        ],
        "to": "MIDDAG/DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY BILL OF FARE",
          "DAILY BILL OF FARE;"
        ],
        "to": "DAILY BILL OF FARE"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column event_uncertain at index 10 based on column event_grel using expression jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "event_uncertain",
    "columnInsertIndex": 10,
    "baseColumnName": "event_grel",
    "expression": "jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column venue_case at index 13 based on column venue using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "venue_case",
    "columnInsertIndex": 13,
    "baseColumnName": "venue",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column venue_count at index 14 based on column venue_case using expression jython:return len(value.replace(';',',').split(','))",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "venue_count",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:return len(value.replace(';',',').split(','))",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column value_5 at index 14 based on column venue_case using expression jython:if len(value.replace(';',',').split(','))>=5:\n    return value.replace(';',',').split(',')[4]\nelse:\n    return ''",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "venue_5",
          "expression": "value",
          "columnName": "venue_5",
          "invert": false,
          "selection": [
            {
              "v": {
                "v": "BAR",
                "l": "BAR"
              }
            }
          ],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": false,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "value_5",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if len(value.replace(';',',').split(','))>=5:\n    return value.replace(';',',').split(',')[4]\nelse:\n    return ''",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column vlaue_4 at index 14 based on column venue_case using expression jython:if len(value.replace(';',',').split(','))>=4:\n    return value.replace(';',',').split(',')[3]\nelse:\n    return ''",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "venue_5",
          "expression": "value",
          "columnName": "venue_5",
          "invert": false,
          "selection": [
            {
              "v": {
                "v": "BAR",
                "l": "BAR"
              }
            }
          ],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": false,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "vlaue_4",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if len(value.replace(';',',').split(','))>=4:\n    return value.replace(';',',').split(',')[3]\nelse:\n    return ''",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column value_3 at index 14 based on column venue_case using expression jython:if len(value.replace(';',',').split(','))>=3:\n    return value.replace(';',',').split(',')[2]\nelse:\n    return ''",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "venue_5",
          "expression": "value",
          "columnName": "venue_5",
          "invert": false,
          "selection": [
            {
              "v": {
                "v": "BAR",
                "l": "BAR"
              }
            }
          ],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": false,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "value_3",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if len(value.replace(';',',').split(','))>=3:\n    return value.replace(';',',').split(',')[2]\nelse:\n    return ''",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column value_2 at index 14 based on column venue_case using expression jython:if len(value.replace(';',',').split(','))>=2:\n    return value.replace(';',',').split(',')[1]\nelse:\n    return ''",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "venue_5",
          "expression": "value",
          "columnName": "venue_5",
          "invert": false,
          "selection": [
            {
              "v": {
                "v": "BAR",
                "l": "BAR"
              }
            }
          ],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": false,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "value_2",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if len(value.replace(';',',').split(','))>=2:\n    return value.replace(';',',').split(',')[1]\nelse:\n    return ''",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column value_1 at index 14 based on column venue_case using expression jython:if len(value.replace(';',',').split(','))>=1:\n    return value.replace(';',',').split(',')[0]\nelse:\n    return ''",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "venue_5",
          "expression": "value",
          "columnName": "venue_5",
          "invert": false,
          "selection": [
            {
              "v": {
                "v": "BAR",
                "l": "BAR"
              }
            }
          ],
          "selectNumber": false,
          "selectDateTime": false,
          "selectBoolean": false,
          "omitBlank": false,
          "selectBlank": false,
          "omitError": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "value_1",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if len(value.replace(';',',').split(','))>=1:\n    return value.replace(';',',').split(',')[0]\nelse:\n    return ''",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column value_1",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "value_1",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC",
          "[SOC?]",
          "SOC(?)",
          "[SOC]",
          "SOC.",
          "(SOC?)",
          "SOC?",
          "(SOC)",
          "SOC (?)",
          "SOC(?):",
          "[?SOC]",
          "[SOC"
        ],
        "to": "SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COM",
          "COM.",
          "[COM]",
          "(COM?)",
          "COM(?)",
          "[COM?]",
          "[COM}"
        ],
        "to": "COM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GOVT",
          "GOV'T",
          "GOVT(?)",
          "[GOVT?]",
          "GOV'T.",
          "GOVT?",
          "[GOVT]"
        ],
        "to": "GOVT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PROF",
          "PROF(?)",
          "PROF.",
          "PROF?",
          "[PROF?]",
          "[PROF]"
        ],
        "to": "PROF"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EDUC",
          "EDUC (?)",
          "[EDUC]",
          "(EDUC)",
          "[EDUC?]"
        ],
        "to": "EDUC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "POL",
          "[POL]",
          "POL.",
          "[POL?)",
          "[POL?]"
        ],
        "to": "POL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIL",
          "MIL (?)",
          "MIL.",
          "[MIL?]"
        ],
        "to": "MIL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATR",
          "PATR(?)",
          "PATR."
        ],
        "to": "PATR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NAV",
          "NAV.",
          "NAV(?)"
        ],
        "to": "NAV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (PRIVATE PARTY)",
          "OTHER (PRIVATE PARTY?)",
          "OTHER (PRIVATE PARTY"
        ],
        "to": "OTHER (PRIVATE PARTY)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GOV",
          "GOV.",
          "[GOV]"
        ],
        "to": "GOV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?",
          "[?]"
        ],
        "to": "?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RELIG",
          "RELIG?"
        ],
        "to": "RELIG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (PRIVATE CLUB)",
          "OTHER [PRIVATE CLUB?]"
        ],
        "to": "OTHER (PRIVATE CLUB)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIAL CLUB",
          "SOCIAL CLUB?"
        ],
        "to": "SOCIAL CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMM",
          "COMM."
        ],
        "to": "COMM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER",
          "[OTHER"
        ],
        "to": "OTHER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (PRIVATE)",
          "OTHER [PRIVATE]"
        ],
        "to": "OTHER (PRIVATE)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILITARY",
          "[MILITARY]"
        ],
        "to": "MILITARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(EDUCATIONAL)",
          "EDUCATIONAL"
        ],
        "to": "(EDUCATIONAL)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NAVAL",
          "[NAVAL]"
        ],
        "to": "NAVAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATRIOTIC",
          "PATRIOTIC?"
        ],
        "to": "PATRIOTIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PRIVATE",
          "(PRIVATE)"
        ],
        "to": "PRIVATE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIAL",
          "(SOCIAL?)"
        ],
        "to": "SOCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column value_2",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "value_2",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(PRIVATE)",
          "PRIVATE",
          "PRIVATE]"
        ],
        "to": "PRIVATE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " COM",
          "COM"
        ],
        "to": " COM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " RELIG",
          "RELIG"
        ],
        "to": " RELIG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC",
          " SOC"
        ],
        "to": "SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " POL",
          "POL"
        ],
        "to": " POL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " MIL",
          "MIL"
        ],
        "to": " MIL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLUB",
          "(CLUB)"
        ],
        "to": "CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL",
          " HOTEL"
        ],
        "to": "HOTEL"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column venue_uncertain at index 14 based on column venue_case using expression jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "venue_uncertain",
    "columnInsertIndex": 14,
    "baseColumnName": "venue_case",
    "expression": "jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column value_1 to venue_1",
    "oldColumnName": "value_1",
    "newColumnName": "venue_1"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column value_2 to venue_2",
    "oldColumnName": "value_2",
    "newColumnName": "venue_2"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column value_3 to venue_3",
    "oldColumnName": "value_3",
    "newColumnName": "venue_3"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column vlaue_4 to venue_4",
    "oldColumnName": "vlaue_4",
    "newColumnName": "venue_4"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column value_5 to venue_5",
    "oldColumnName": "value_5",
    "newColumnName": "venue_5"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_case at index 22 based on column place using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_case",
    "columnInsertIndex": 22,
    "baseColumnName": "place",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_cluster at index 23 based on column place_case using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_cluster",
    "columnInsertIndex": 23,
    "baseColumnName": "place_case",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO'S, NEW YORK, NY",
          "DELMONICO'S, [NEW YORK, N.Y.]",
          "DELMONICO'S,[NEW YORK,NY?]",
          "DELMONICOS, [NEW YORK, N.Y.]",
          "DELMONICO'S NEW YORK,NY",
          "DELMONICO'S, (NEW YORK, NY?)",
          "DELMONICO'S, [NEW YORK, NY]",
          "DELMONICO'S, [NEW YORK, NY];",
          "DELMONICO'S, [NEW YORK,N.Y.]",
          "DELMONICO'S,NEW YORK,NY",
          "DELMONICO'S,[NEW YORK, N.Y.]",
          "DELMONICO'S. NEW YORK, NY",
          "DELMONICOS, (NEW YORK, NY?)",
          "DELMONICOS, NEW YORK, NY",
          "[DELMONICO'S,NEW YORK NY]",
          "[DELMONICO'S], NEW YORK, NY"
        ],
        "to": "DELMONICO'S, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO'S NY",
          "DELMONICO'S [NY]",
          "DELMONICO'S,NY",
          "DELMONICO'S [NY?]",
          "DELMONICO'S, NY",
          "DELMONICO'S,[NY]",
          "DELMONICO'S[NY]",
          "DELMONICO'S, N.Y.",
          "DELMONICO'S, NY;",
          "DELMONICO'S, [NY]",
          "DELMONICO'S,(NY?)",
          "DELMONICOS NY",
          "DELMONICOS', NY",
          "DELMONICOS, (NY)",
          "DELMONICOS,[NY]"
        ],
        "to": "DELMONICO'S NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK, NY",
          "NEW YORK, [NY]",
          "[NEW YORK, NY]",
          "NEW YORK,NY",
          "[NEW YORK, NY?]",
          "(NEW YORK, NY?)",
          "(NEW YORK,NY)",
          "NEW YORK, [NY];",
          "[NEW YORK,NY]",
          "NEW YORK [NY]",
          "NEW YORK, NY [?]",
          "NEW YORK,[NY]",
          "[NEW YORK, NY];"
        ],
        "to": "NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PHILADELPHIA, PA",
          "PHILADELPHIA [PA]",
          "PHILADELPHIA,PA.",
          "[PHILADELPHIA, PA]",
          "PHILADELPHIA,PA",
          "PHILADELPHIA, PA.",
          "PHILADELPHIA, [PA]",
          "PHILADELPHIA,[PA]",
          "PHILADELPHIA. PA",
          "[PHILADELPHIA, PA?]",
          "[PHILADELPHIA,PA.]"
        ],
        "to": "PHILADELPHIA, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAN FRANCISCO, CA",
          "[SAN FRANCISCO,CA]",
          "SAN FRANCISCO,CA;",
          "SAN FRANCISCO,[CA?]",
          "(SAN FRANCISCO, CA?)",
          "SAN FRANCISCO, CA;",
          "SAN FRANCISCO,CA",
          "SAN FRANCISCO,CA.",
          "[SAN FRANCISCO, CA]"
        ],
        "to": "SAN FRANCISCO, CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK",
          "[NEW YORK]",
          "(NEW YORK?)",
          "NEW YORK;",
          "\"NEW YORK\"",
          "(NEW YORK)",
          "NEW YORK (?)",
          "NEW YORK(?)",
          "NEW YORK?"
        ],
        "to": "NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUDITORIUM HOTEL [CHICAGO, IL]",
          "AUDITORIUM HOTEL, CHICAGO, IL",
          "AUDITORIUM HOTEL , CHICAGO, IL",
          "AUDITORIUM HOTEL [CHICAGO IL]",
          "AUDITORIUM HOTEL, (?CHICAGO, IL?)",
          "AUDITORIUM HOTEL, (CHICAGO, IL?)",
          "AUDITORIUM HOTEL, CHICAGO [IL]",
          "AUDITORIUM HOTEL, CHICAGO, [IL]",
          "AUDITORIUM HOTEL,[CHICAGO, IL]"
        ],
        "to": "AUDITORIUM HOTEL [CHICAGO, IL]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO, IL",
          "CHICAGO, [IL]",
          "[CHICAGO, IL]",
          "(CHICAGO,IL)",
          "CHICAGO IL",
          "CHICAGO [IL]",
          "CHICAGO,IL.",
          "CHICAGO,[IL]",
          "[CHICAGO IL?]"
        ],
        "to": "CHICAGO, IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO'S [NEW YORK]",
          "DELMONICO'S, [NEW YORK]",
          "DELMONICO'S,[NEW YORK]",
          "DELMONICOS,[NEW YORK]",
          "(DELMONICO'S.NEW YORK)",
          "DELMONICO'S, NEW YORK",
          "DELMONICO'S,( NEW YORK)",
          "DELMONICOS, NEW YORK"
        ],
        "to": "DELMONICO'S [NEW YORK]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO,ILL.",
          "(CHICAGO, ILL)",
          "CHICAGO,ILL;",
          "CHICAGO ,ILL",
          "CHICAGO, ILL",
          "CHICAGO,ILL",
          "[CHICAGO,ILL]"
        ],
        "to": "CHICAGO,ILL."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE \"FRIEDRICH DER GROSSE\"",
          "EN ROUTE - \"FRIEDRICH DER GROSSE\"",
          "EN ROUTE \" FRIEDRICH DER GROSSE\"",
          "EN ROUTE \"FRIEDRICH DER GROSSE \"",
          "EN ROUTE 'FRIEDRICH DER GROSSE\"",
          "EN ROUTE - 'FRIEDRICH DER GROSSE \"",
          "EN ROUTE - :FRIEDRICH DER GROSSE\""
        ],
        "to": "EN ROUTE \"FRIEDRICH DER GROSSE\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASSAU, N.P. BAHAMAS",
          "NASSAU,N.P.BAHAMAS",
          "NASSAU,NP,BAHAMAS",
          "NASSAU, N.P., BAHAMAS",
          "NASSAU,NP;BAHAMAS",
          "[NASSAU, N.P., BAHAMAS]",
          "[NASSAU,N.P.,BAHAMAS]"
        ],
        "to": "NASSAU, N.P. BAHAMAS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTON, DC",
          "WASHINGTON,D.C.",
          "WASHINGTON, D.C.",
          "WASHINGTON,DC",
          "WASHINGTON DC",
          "WASHINGTON,[D.C.]",
          "[WASHINGTON,DC]"
        ],
        "to": "WASHINGTON, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROOKLYN, NY",
          "BROOKLYN,NY",
          "[BROOKLYN, NY]",
          "BROOKLYN NY",
          "BROOKLYN,NY(?)",
          "BROOKLYN[NY]",
          "[BROOKLYN,NY]"
        ],
        "to": "BROOKLYN, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PROVIDENCE, RI",
          "PROVIDENCE, R.I.",
          "PROVIDENCE RI",
          "PROVIDENCE,RI;",
          "[PROVIDENCE RI?]",
          "[PROVIDENCE, R.I.]",
          "[PROVIDENCE, RI?]"
        ],
        "to": "PROVIDENCE, RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARIS,FRANCE",
          "PARIS, FRANCE",
          "(PARIS,FRANCE)",
          "PARIS, FRANCE(?)",
          "PARIS, [FRANCE]",
          "[PARIS, FRANCE?]",
          "[PARIS, FRANCE]"
        ],
        "to": "PARIS,FRANCE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DETROIT, MI",
          "DETROIT,MI",
          "(DETROIT, MI?)",
          "(DETROIT,MI?)",
          "DETROIT, [MI]",
          "DETROIT,[MI?]",
          "[DETROIT, MI]"
        ],
        "to": "DETROIT, MI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. LOUIS, MO",
          "ST. LOUIS, [MO];",
          "[ST.LOUIS,MO?]",
          "ST LOUIS,MO",
          "ST. LOUIS [MO]",
          "[ST.LOUIS, MO]"
        ],
        "to": "ST. LOUIS, MO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OLD POINT COMFORT, VA",
          "OLD POINT COMFORT,VA",
          "OLD POINT COMFORT VA",
          "OLD POINT COMFORT, VA.",
          "OLD POINT, COMFORT, VA",
          "[OLD POINT COMFORT, VA]"
        ],
        "to": "OLD POINT COMFORT, VA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ATLANTIC CITY, NJ",
          "ATLANTIC CITY,NJ",
          "ATLANTIC CITY, N.J.",
          "ATLANTIC CITY, NJ;",
          "ATLANTIC CITY,[NJ]",
          "[ATLANTIC CITY, NJ]"
        ],
        "to": "ATLANTIC CITY, NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUFFALO, NY",
          "BUFFALO,NY",
          "(BUFFALO, NY?)",
          "BUFFALO NY(?)",
          "[BUFFALO, NY",
          "[BUFFALO, NY]"
        ],
        "to": "BUFFALO, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROME, ITALY",
          "(ROME,ITALY)",
          "ROME [ITALY]",
          "ROME,ITALY",
          "ROME ITALY",
          "[ROME, ITALY]"
        ],
        "to": "ROME, ITALY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LONG BEACH, L.I, NY",
          "LONG BEACH, LI, [NY];",
          "LONG BEACH, L.I., NY",
          "LONG BEACH,L.I.,NY;",
          "LONG BEACH,L.I.,[NY&]",
          "LONG BEACH,LI,[NY?]"
        ],
        "to": "LONG BEACH, L.I, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND HOTEL, CINCINNATI OH",
          "GRAND HOTEL, CINCINNATI OH;",
          "GRAND HOTEL, CINCINNATI [OH]",
          "GRAND HOTEL, CINCINNATI, OH",
          "GRAND HOTEL, [CINCINNATI, OH]"
        ],
        "to": "GRAND HOTEL, CINCINNATI OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS CAMPANIA",
          "R.M.S. CAMPANIA",
          "R.M.S. \"CAMPANIA\"",
          "R.M.S. \" CAMPANIA\"",
          "R.M.S.\"CAMPANIA\""
        ],
        "to": "RMS CAMPANIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY'S [NY]",
          "SHERRY'S NY",
          "SHERRY'S, NY",
          "SHERRY'S (NY?)",
          "SHERRYS, NY"
        ],
        "to": "SHERRY'S [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LONDON, ENGLAND",
          "[LONDON,ENGLAND]",
          "LONDON,[ENGLAND]",
          "LONDON,ENGLAND",
          "[LONDON,ENGLAND ?]"
        ],
        "to": "LONDON, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "QUEBEC, CANADA",
          "QUEBEC [CANADA]",
          "QUEBEC,CANADA",
          "QUEBEC,[ CANADA]",
          "QUEBEC, [CANADA]"
        ],
        "to": "QUEBEC, CANADA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BRUNSWICK NY",
          "HOTEL BRUNSWICK,NY",
          "HOTEL BRUNSWICK [NY?]",
          "HOTEL BRUNSWICK, NY",
          "HOTEL BRUNSWICK; NY"
        ],
        "to": "HOTEL BRUNSWICK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLINTON COUNTY, NY",
          "CLINTON COUNTY NY",
          "CLINTON COUNTY, NY.",
          "CLINTON COUNTY,NY",
          "CLINTON COUNTY.NY"
        ],
        "to": "CLINTON COUNTY, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE - SS \"LAHN\"",
          "EN ROUTE - \"SS LAHN\"",
          "EN ROUTE \"SS LAHN\"",
          "EN ROUTE -SS \"LAHN\"",
          "EN ROUTE _ SS \"LAHN\""
        ],
        "to": "EN ROUTE - SS \"LAHN\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LOS ANGELES,CA",
          "LOS ANGELES, CA;",
          "LOS ANGELES,CA;",
          "LOS ANGELES,[CA?]",
          "LOS ANGELES, CA"
        ],
        "to": "LOS ANGELES,CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS FRIESLAND",
          "S.S. FRIESLAND",
          "SS. FRIESLAND",
          "S.S. \"FRIESLAND\"",
          "SS; \"FRIESLAND\""
        ],
        "to": "SS FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NARRAGANSETT PIER R.I.",
          "NARRAGANSETT PIER, RI",
          "NARAGANSETT PIER, RI",
          "NARRAGANSETT PIER,R.I.",
          "NARRAGANSETT PIER,RI"
        ],
        "to": "NARRAGANSETT PIER R.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SARATOGA SPRINGS, NY",
          "SARATOGA SPRINGS,NY",
          "SARATOGA SPRINGS, NY.",
          "SARATOGA SPRINGS, [NY]",
          "SARATOGA SPRINGS,[NY]"
        ],
        "to": "SARATOGA SPRINGS, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE S.S.\"BARBAROSSA\"",
          "EN ROUTE - S.S.BARBAROSSA",
          "EN ROUTE S.S \"BARBAROSSA\"",
          "EN ROUTE; S.S.BARBAROSSA",
          "EN ROUTE; S.S.BARBAROSSA\""
        ],
        "to": "EN ROUTE S.S.\"BARBAROSSA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLEVELAND, OH",
          "[CLEVELAND, OH]",
          "CLEVELAND,OH",
          "CLEVELAND [OH]",
          "CLEVELAND,[OH?]"
        ],
        "to": "CLEVELAND, OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOSTON,MASS",
          "BOSTON,MASS;",
          "(BOSTON,MASS)",
          "BOSTON, MASS.",
          "BOSTON, MASS;"
        ],
        "to": "BOSTON,MASS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NY",
          "[NY]",
          "(NY)",
          "(N.Y.)",
          "(NY?)"
        ],
        "to": "NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF ASTORIA, NY",
          "WALDORF-ASTORIA,NY",
          "WALDORF-ASTORIA,[NY]",
          "WALDORF-ASTORIA [NY?]",
          "WALDORF-ASTORIA, NY"
        ],
        "to": "WALDORF ASTORIA, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN, NY",
          "HOTEL MANHATTAN,NY",
          "HOTEL MANHATTAN [NY]",
          "HOTEL MANHATTAN, [NY]",
          "HOTEL MANHATTAN,[NY]"
        ],
        "to": "HOTEL MANHATTAN, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "QUEEN CITY CLUB, [CINCINNATI, OH]",
          "QUEEN CITY CLUB (CINCINNATI OH?)",
          "QUEEN CITY CLUB CINCINNATI OH",
          "QUEEN CITY CLUB, CINCINNATI, OH"
        ],
        "to": "QUEEN CITY CLUB, [CINCINNATI, OH]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPENHAGEN, DENMARK",
          "COPENHAGEN,DENMARK",
          "[COPENHAGEN DENMARK?]",
          "[COPENHAGEN, DENMARK]"
        ],
        "to": "COPENHAGEN, DENMARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL IROQUOIS, BUFFALO, NY",
          "HOTEL IROQUOIS, BUFFALO,NY",
          "HOTEL IROQUOIS,(BUFFALO,N.Y.)",
          "HOTEL IROQUOIS,BUFFALO,NY"
        ],
        "to": "HOTEL IROQUOIS, BUFFALO, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARKER HOUSE [BOSTON,MASS ?]",
          "PARKER HOUSE, BOSTON,MASS",
          "PARKER HOUSE,BOSTON,MASS;",
          "PARKER HOUSE,[BOSTON,MASS]"
        ],
        "to": "PARKER HOUSE [BOSTON,MASS ?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASSAU,N.P.",
          "NASSAU, N. P.,",
          "NASSAU, NP",
          "[NASSAU, N.P.]"
        ],
        "to": "NASSAU,N.P."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROANOKE, VA",
          "ROANOKE, VA;",
          "ROANOKE,VA",
          "ROANOKE,VA;"
        ],
        "to": "ROANOKE, VA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCANTILE CLUB (ST LOUIS, MO)",
          "MERCANTILE CLUB, ST LOUIS [MO]",
          "MERCANTILE CLUB, ST. LOUIS, MO",
          "MERCANTILE CLUB, ST.LOUIS MO"
        ],
        "to": "MERCANTILE CLUB (ST LOUIS, MO)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ARLINGTON, WASHINGTON, D.C.",
          "THE ARLINGTON (WASHINGTON DC?)",
          "THE ARLINGTON, WASHINGTON, DC",
          "THE ARLINGTON, WASHINGTON,DC"
        ],
        "to": "THE ARLINGTON, WASHINGTON, D.C."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PLANTERS HOTEL, (ST.LOUIS, MO?)",
          "PLANTERS HOTEL, ST. LOUIS, [MO]",
          "PLANTERS HOTEL, ST. LOUIS,[MO]",
          "PLANTERS HOTEL, ST.LOUIS,MO"
        ],
        "to": "PLANTERS HOTEL, (ST.LOUIS, MO?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"ETRURIA\"",
          "R. M. S. ETRURIA",
          "R.M.S. ETRURIA",
          "RMS ETRURIA"
        ],
        "to": "R.M.S. \"ETRURIA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS CITY OF RIO DE JANEIRO",
          "S.S. \"CITY OF RIO DE JANEIRO\"",
          "[SS CITY OF RIO DE JANEIRO?]",
          "[SS CITY OF RIO DE JANEIRO]"
        ],
        "to": "SS CITY OF RIO DE JANEIRO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY [NEW YORK]",
          "HOTEL SAVOY, NEW YORK",
          "HOTEL SAVOY, [NEW YORK]",
          "HOTEL SAVOY; NEW YORK"
        ],
        "to": "HOTEL SAVOY [NEW YORK]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF-ASTORIA, NEW YORK",
          "WALDORF-ASTORIA [NEW YORK]",
          "WALDORF-ASTORIA, [NEW YORK]",
          "WALDORF- ASTORIA, NEW YORK"
        ],
        "to": "WALDORF-ASTORIA, NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE AUDITORIUM [CHICAGO, IL]",
          "THE AUDITORIUM, CHICAGO, IL",
          "THE AUDITORIUM CHICAGO IL",
          "THE AUDITORIUM, [CHICAGO, IL]"
        ],
        "to": "THE AUDITORIUM [CHICAGO, IL]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOSTON, MA",
          "BOSTON,MA.",
          "BOSTON MA",
          "BOSTON; MA"
        ],
        "to": "BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST.AUGUSTINE,FLA.",
          "ST. AUGUSTINE, FLA",
          "ST. AUGUSTINE, FLA.",
          "ST.AUGUSTINE, FLA."
        ],
        "to": "ST.AUGUSTINE,FLA."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOUTHERN HOTEL, ST. LOUIS, MO",
          "SOUTHERN HOTEL, [ST. LOUIS, MO]",
          "SOUTHERN HOTEL,ST. LOUIS,MO.",
          "SOUTHERN HOTEL,[ST.LOUIS,MO]"
        ],
        "to": "SOUTHERN HOTEL, ST. LOUIS, MO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION LEAGUE PHILADELPHIA [PA?]",
          "UNION LEAGUE, [PHILADELPHIA, PA]",
          "UNION LEAGUE,(PHILADELPHIA,PA)",
          "UNION LEAGUE,[PHILADELPHIA,PA]"
        ],
        "to": "UNION LEAGUE PHILADELPHIA [PA?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BERGEN, NORWAY",
          "BERGEN,NORWAY",
          "(BERGEN, NORWAY)",
          "[BERGEN, NORWAY]"
        ],
        "to": "BERGEN, NORWAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "YOUNG'S HOTEL, BOSTON, MA",
          "YOUNG\"S HOTEL, BOSTON, MA",
          "YOUNG'S HOTEL, [BOSTON MA?]",
          "YOUNGS HOTEL,BOSTON,MA"
        ],
        "to": "YOUNG'S HOTEL, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CINCINNATI, OH",
          "CINCINNATI [OH]",
          "CINCINNATI,OH",
          "[CINCINNATI,OH?]"
        ],
        "to": "CINCINNATI, OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MELBOURNE, AUSTRALIA",
          "MELBOURNE,AUSTRALIA",
          "MELBOURNE [AUSTRALIA?]",
          "[MELBOURNE,AUSTRALIA?]"
        ],
        "to": "MELBOURNE, AUSTRALIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MONTREAL [CANADA?]",
          "MONTREAL, CANADA",
          "MONTREAL, [CANADA]",
          "MONTREAL,CANADA"
        ],
        "to": "MONTREAL [CANADA?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HAMBURG, GERMANY",
          "HAMBURG, [GERMANY]",
          "HAMBURG,GERMANY",
          "HAMBURG,[GERMANY]"
        ],
        "to": "HAMBURG, GERMANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY, NY",
          "HOTEL SAVOY,[NY]",
          "HOTEL SAVOY NY",
          "HOTEL SAVOY, [NY]"
        ],
        "to": "HOTEL SAVOY, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS WESTERNLAND",
          "S.S. WESTERNLAND",
          "S.S. \"WESTERNLAND\"",
          "S.S.WESTERNLAND"
        ],
        "to": "SS WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PUT-IN-BAY-ISLAND, LAKE ERIE, OH;",
          "PUT-IN-BAY ISLAND, LAKE ERIE, OH",
          "PUT-IN-BAY-ISLAND, LAKE ERIE, OH",
          "PUT-IN-BAY ISLAND, LAKE ERIE, OH;"
        ],
        "to": "PUT-IN-BAY-ISLAND, LAKE ERIE, OH;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD, WASHINGTON, DC",
          "THE NEW WILLARD [WASHINGTON, DC",
          "THE NEW WILLARD, WASHINGTON DC",
          "THE NEW WILLARD, WASHINGTON, D.C."
        ],
        "to": "THE NEW WILLARD, WASHINGTON, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AT SEA",
          "[AT SEA ?]",
          "(AT SEA)",
          "[AT SEA?]"
        ],
        "to": "AT SEA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME, BOSTON, MA",
          "HOTEL VENDOME, [BOSTON, MA];",
          "HOTEL VENDOME,BOSTON.MA",
          "HOTEL VENDOME; BOSTON, MA"
        ],
        "to": "HOTEL VENDOME, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. CHARLES HOTEL, NEW ORLEANS LA",
          "ST. CHARLES HOTEL, NEW ORLEANS, LA",
          "ST. CHARLES HOTEL,NEW ORLEANS,LA",
          "ST. CHARLES HOTEL,NEW ORLEANS,[LA]"
        ],
        "to": "ST. CHARLES HOTEL, NEW ORLEANS LA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 BROAD STREET, NEW YORK, [NY]",
          "57 BROAD STREET,NEW YORK,NY",
          "57 BROAD STREET, NEW YORK, NY"
        ],
        "to": "57 BROAD STREET, NEW YORK, [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO BEACH HOTEL [CHICAGO, IL]",
          "CHICAGO BEACH HOTEL, CHICAGO, [IL];",
          "CHICAGO BEACH HOTEL, [CHICAGO.IL?]"
        ],
        "to": "CHICAGO BEACH HOTEL [CHICAGO, IL]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH ST AND BROADWAY,NEW YORK,NY",
          "66TH ST. AND BROADWAY;NEW YORK,NY",
          "[66TH ST AND BROADWAY,NEW YORK,NY]"
        ],
        "to": "66TH ST AND BROADWAY,NEW YORK,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WHITE MOUNTAINS, NH",
          "WHITE MOUNTAINS, NH;",
          "WHITE MOUNTAINS,N.H."
        ],
        "to": "WHITE MOUNTAINS, NH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF-ASTORIA, NEW YORK, NY",
          "WALDORF ASTORIA, NEW YORK, NY",
          "WALDORF ASTORIA,NEW YORK,NY"
        ],
        "to": "WALDORF-ASTORIA, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CINCINNATI,OHIO",
          "CINCINNATI , OHIO",
          "CINCINNATI, OHIO"
        ],
        "to": "CINCINNATI,OHIO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ORLEANS, LA",
          "NEW ORLEANS, [LA]",
          "NEW ORLEANS,[LA?]"
        ],
        "to": "NEW ORLEANS, LA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLEVELAND,OHIO",
          "CLEVELAND, OHIO",
          "CLEVELAND. OHIO"
        ],
        "to": "CLEVELAND,OHIO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIAMI BISCAYNE BAY,FLA.",
          "MIAMI BISCAYNE BAY, FLA.",
          "MIAMI,BISCAYNE BAY,FLA."
        ],
        "to": "MIAMI BISCAYNE BAY,FLA."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANHATTAN HOTEL,NY",
          "MANHATTAN HOTEL NY",
          "MANHATTAN HOTEL, NY"
        ],
        "to": "MANHATTAN HOTEL,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF-ASTORIA, THE, NEW YORK, NY",
          "WALDORF ASTORIA,THE, NEW YORK, NY",
          "WALDORF-ASTORIA,THE,[NEW YORK,NY?]"
        ],
        "to": "WALDORF-ASTORIA, THE, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ZERMATT, [SWITZERLAND]",
          "(ZERMATT, SWITZERLAND?)",
          "ZERMATT [SWITZERLAND]"
        ],
        "to": "ZERMATT, [SWITZERLAND]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SYRACUSE NY",
          "SYRACUSE,NY",
          "SYRACUSE, NY"
        ],
        "to": "SYRACUSE NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CITY",
          "[NEW YORK CITY]",
          "[?NEW YORK CITY?]"
        ],
        "to": "NEW YORK CITY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KASUGA",
          "S.S. KASUGA",
          "SS: KASUGA"
        ],
        "to": "SS KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS KOBE MARU",
          "EN ROUTE ABOARD SS. KOBE MARU",
          "EN ROUTE ABOARD SS.KOBE MARU"
        ],
        "to": "EN ROUTE ABOARD SS KOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFFMAN HOUSE NEW YORK, NY",
          "HOFFMAN HOUSE, NEW YORK, NY",
          "HOFFMAN HOUSE,NEW YORK,NY"
        ],
        "to": "HOFFMAN HOUSE NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PUT-IN-BAY ISLAND, OH",
          "PUT IN BAY ISLAND, OH",
          "PUT-IN-BAY-ISLAND, OH;"
        ],
        "to": "PUT-IN-BAY ISLAND, OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS CITY OF PARA",
          "S.S. \"CITY OF PARA\"",
          "S.S. \"CITY OF PARA'"
        ],
        "to": "SS CITY OF PARA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ARGYLE, THE, BROOKLYN, NY",
          "ARGYLE,THE,BROOKLYN,NY",
          "ARGYLE,THE,[BROOKLYN,NY]"
        ],
        "to": "ARGYLE, THE, BROOKLYN, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BALTIMORE, MD",
          "BALTIMORE,MD",
          "BALTIMORE,MD."
        ],
        "to": "BALTIMORE, MD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE, EXPRESS-STEAMER FURST BISMARCK",
          "EN-ROUTE EXPRESS-STEAMER FURST BISMARCK",
          "ENROUTE EXPRESS STEAMER \"FURST BISMARCK\""
        ],
        "to": "EN ROUTE, EXPRESS-STEAMER FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "KONIGIN LUISE",
          "\"KONIGIN LUISE\"",
          "KONIGIN LUISE;"
        ],
        "to": "KONIGIN LUISE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ALGONQUIN CLUB, BOSTON, MA",
          "NEW ALGONQUIN CLUB [BOSTON, MA]",
          "NEW ALGONQUIN CLUB, (BOSTON, MA?)"
        ],
        "to": "NEW ALGONQUIN CLUB, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINDSOR HOTEL, [NY]",
          "WINDSOR HOTEL,(NY)",
          "WINDSOR HOTEL[NY]"
        ],
        "to": "WINDSOR HOTEL, [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS: KAMAKURA MARU",
          "SS: \"KAMAKURA MARU\"",
          "SS; KAMAKURA MARU"
        ],
        "to": "SS: KAMAKURA MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS DORIC",
          "SS DORIC;",
          "S.S. \"DORIC\""
        ],
        "to": "SS DORIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DENVER, COLO.",
          "DENVER, COLO;",
          "DENVER,COLO."
        ],
        "to": "DENVER, COLO."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "VIRGINIA BEACH, VA",
          "VIRGINIA BEACH VA",
          "VIRGINIA BEACH,VA"
        ],
        "to": "VIRGINIA BEACH, VA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. PETERSBURG (RUSSIA?)",
          "ST. PETERSBURG,[RUSSIA]",
          "ST. PETERSBURG.RUSSIA"
        ],
        "to": "ST. PETERSBURG (RUSSIA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NAPLES [ITALY]",
          "NAPLES,[ITALY]",
          "NAPLES, ITALY"
        ],
        "to": "NAPLES [ITALY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"LUCANIA\"",
          "RMS LUCANIA",
          "R.M.S. LUCANIA"
        ],
        "to": "R.M.S. \"LUCANIA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FANEUIL HALL, BOSTON, [MASS]",
          "FANEUIL HALL, [BOSTON,MASS]",
          "FANEUIL HALL,BOSTON,MASS."
        ],
        "to": "FANEUIL HALL, BOSTON, [MASS]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[TOKYO, JAPAN]",
          "TOKYO, JAPAN",
          "[TOKYO,JAPAN]?"
        ],
        "to": "[TOKYO, JAPAN]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE HOLLENDEN [CLEVELAND OH?]",
          "THE HOLLENDEN, CLEVELAND, OH",
          "THE HOLLENDEN, CLEVELAND; OH"
        ],
        "to": "THE HOLLENDEN [CLEVELAND OH?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PORTLAND, ME",
          "PORTLAND,ME",
          "PORTLAND ME"
        ],
        "to": "PORTLAND, ME"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN, NEW YORK, [NY];",
          "HOTEL MANHATTAN, [NEW YORK, NY]",
          "HOTEL MANHATTAN,NEW YORK [NY]"
        ],
        "to": "HOTEL MANHATTAN, NEW YORK, [NY];"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BERLIN, GERMANY",
          "BERLIN [GERMANY]",
          "BERLIN,GERMANY"
        ],
        "to": "BERLIN, GERMANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS RIO DE JANEIRO",
          "SS: RIO DE JANEIRO",
          "SS; RIO DE JANEIRO"
        ],
        "to": "SS RIO DE JANEIRO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAMPA, FL",
          "TAMPA,FL",
          "TAMPA FL?"
        ],
        "to": "TAMPA, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE-STRATFORD, (PHILADELPHIA, PA?)",
          "BELLEVUE-STRATFORD, PHILADELPHIA, PA",
          "BELLEVUE-STRATFORD, [PHILADELPHIA, PA]"
        ],
        "to": "BELLEVUE-STRATFORD, (PHILADELPHIA, PA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALTOONA, PA",
          "ALTOONA, PA;",
          "ALTOONA,PA"
        ],
        "to": "ALTOONA, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANILA, P.I.",
          "MANILA, PI",
          "MANILA,P.I."
        ],
        "to": "MANILA, P.I."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ADELAIDE [AUSTRALIA?]",
          "ADELAIDE, AUSTRALIA",
          "[ADELAIDE, AUSTRALIA]"
        ],
        "to": "ADELAIDE [AUSTRALIA?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORF, NEW YORK, NY",
          "THE WALDORF, [?NEW YORK, NY]",
          "THE WALDORF, [NEW YORK, NY?]"
        ],
        "to": "THE WALDORF, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE S.S.VADERLAND",
          "EN ROUTE S.S VADERLAND",
          "EN ROUTE S.S. VADERLAND"
        ],
        "to": "EN ROUTE S.S.VADERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUE-STRATFORD [PHILADELPHIA, PA]",
          "HOTEL BELLEVUE-STRATFORD, PHILADELPHIA, PA",
          "HOTEL BELLEVUE-STRATFORD, [PHILADELPHIA, PA]"
        ],
        "to": "HOTEL BELLEVUE-STRATFORD [PHILADELPHIA, PA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE S.S. ZEELAND",
          "EN ROUTE S.S.ZEELAND",
          "EN ROUTE S.S ZEELAND"
        ],
        "to": "EN ROUTE S.S. ZEELAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LAKEWOOD, NJ",
          "LAKEWOOD NJ",
          "LAKEWOOD, N.J."
        ],
        "to": "LAKEWOOD, NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS COPTIC",
          "S.S. \"COPTIC\"",
          "S.S. COPTIC"
        ],
        "to": "SS COPTIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. ROTTERDAM",
          "R.M.S.ROTTERDAM",
          "RMS-ROTTERDAM"
        ],
        "to": "R.M.S. ROTTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66 ST. & B'WAY NY",
          "66 ST. & B'WAY. NY",
          "66 ST. & BWAY. NY"
        ],
        "to": "66 ST. & B'WAY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "117 WEST 34TH STREET,NEW YORK,NY",
          "117 WEST 34TH STREET,[NEW YORK,NY]",
          "117WEST 34TH STREET,NEW YORK,NY"
        ],
        "to": "117 WEST 34TH STREET,NEW YORK,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "KRUEGER AUDITORIUM (NEWARK NJ?)",
          "KRUEGER AUDITORIUM, NEWARK, NJ",
          "KRUEGER AUDITORIUM,NEWARK[NJ]"
        ],
        "to": "KRUEGER AUDITORIUM (NEWARK NJ?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S. WESTERNLAND",
          "EN ROUTE ABOARD S.S. WESTERNLAND;",
          "ENROUTE ABOARD S.S. WESTERNLAND"
        ],
        "to": "EN ROUTE ABOARD S.S. WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILWAUKEE, WI",
          "MILWAUKEE,WI",
          "MILWAUKEE, [WI];"
        ],
        "to": "MILWAUKEE, WI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HAVANA, CUBA",
          "HAVANA,CUBA",
          "[HAVANA,CUBA]"
        ],
        "to": "HAVANA, CUBA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ELLICOTT SQUARE, BUFFALO, NY",
          "ELLICOTT SQUARE,BUFFALO,[NY?]",
          "ELLICOTT SQUARE, BUFFALO, [NY];"
        ],
        "to": "ELLICOTT SQUARE, BUFFALO, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ELLICOTT CLUB, BUFFALO, NY",
          "ELLICOTT CLUB,BUFFALO,NY",
          "ELLICOTT CLUB (BUFFALO NY?)"
        ],
        "to": "ELLICOTT CLUB, BUFFALO, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. DENIS HOTEL; NY",
          "ST.DENIS HOTEL,NY",
          "ST.DENIS HOTEL[NY]"
        ],
        "to": "ST. DENIS HOTEL; NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LOGAN HOUSE, ALTOONA, PA",
          "LOGAN HOUSE,ALTOONA,PA",
          "LOGAN HOUSE; ALTOONA, PA;"
        ],
        "to": "LOGAN HOUSE, ALTOONA, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WALTON, PHILADELPHIA [PA]",
          "HOTEL WALTON,PHILADELPHIA,PA;",
          "HOTEL WALTON,[PHILADELPHIA,PA]"
        ],
        "to": "HOTEL WALTON, PHILADELPHIA [PA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAMPA,FLA.",
          "TAMPA, FLA.",
          "TAMPA.FLA."
        ],
        "to": "TAMPA,FLA."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE",
          "ENROUTE",
          "[EN ROUTE]"
        ],
        "to": "EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WHITEHALL ROOMS, THE HOTEL METROPOLE, LONDON [ENGLAND]",
          "WHITEHALL ROOMS, THE HOTEL METROPOLE, LONDON, [ENGLAND]",
          "WHITEHALL ROOMS,THE HOTEL METROPOLE, LONDON,ENGLAND"
        ],
        "to": "WHITEHALL ROOMS, THE HOTEL METROPOLE, LONDON [ENGLAND]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SOMERSET, BOSTON, MA",
          "HOTEL SOMERSET, BOSTON, [MA]",
          "HOTEL SOMERSET, [BOSTON, MA]"
        ],
        "to": "HOTEL SOMERSET, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"EMPRESS OF CHINA\"",
          "RMS EMPRESS OF CHINA",
          "R.M.S. EMPRESS OF CHINA"
        ],
        "to": "R.M.S. \"EMPRESS OF CHINA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLORADO SPRINGS, CO",
          "[COLORADO SPRINGS, CO]",
          "COLORADO SPRINGS,COLO."
        ],
        "to": "COLORADO SPRINGS, CO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FANEUIL HALL, BOSTON, MA",
          "FANEUIL HALL, [BOSTON, MA]",
          "FANEUIL HALL,BOSTON,MA."
        ],
        "to": "FANEUIL HALL, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?",
          "[?]"
        ],
        "to": "?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOBOKEN, NJ",
          "HOBOKEN,NJ"
        ],
        "to": "HOBOKEN, NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. EMPRESS OF INDIA",
          "R.M.S. \"EMPRESS OF INDIA\""
        ],
        "to": "R.M.S. EMPRESS OF INDIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE - S.S.\"H.H.MEIER\"",
          "EN ROUTE -S.S. \"H.H.MEIER\""
        ],
        "to": "EN ROUTE - S.S.\"H.H.MEIER\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD R.M.S. \"ETRURIA\"",
          "ABOARD R.M.S. ETRURIA"
        ],
        "to": "ABOARD R.M.S. \"ETRURIA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUCKINGHAM PALACE, LONDON, ENGLAND",
          "BUCKINGHAM PALACE, [ LONDON,ENGLAND]"
        ],
        "to": "BUCKINGHAM PALACE, LONDON, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY'S, NEW YORK, NY",
          "SHERRY'S, [NEW YORK, NY]"
        ],
        "to": "SHERRY'S, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OMAHA NEBRASKA",
          "OMAHA, NEBRASKA"
        ],
        "to": "OMAHA NEBRASKA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION LEAGUE",
          "(UNION LEAGUE?)"
        ],
        "to": "UNION LEAGUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASHVILLE, [TN?]",
          "NASHVILLE, TN"
        ],
        "to": "NASHVILLE, [TN?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S.ZEELAND",
          "EN ROUTE ABOARD S.S. ZEELAND"
        ],
        "to": "EN ROUTE ABOARD S.S.ZEELAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. NICHOLAS HOTEL, ST.LOUIS, MO",
          "ST.NICHOLAS HOTEL,ST. LOUIS,MO;"
        ],
        "to": "ST. NICHOLAS HOTEL, ST.LOUIS, MO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ARLINGTON,WASH.DC",
          "THE ARLINGTON,WASH.DC."
        ],
        "to": "THE ARLINGTON,WASH.DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PITTSBURGH, PA",
          "[PITTSBURGH, PA]"
        ],
        "to": "PITTSBURGH, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(?FLA?)",
          "[FLA.]"
        ],
        "to": "(?FLA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SCHNELLDAMPFER (EXPRESS STEAMER) AUGUSTE VICTORIA",
          "EN ROUTE ABOARD SCHNELLDAMPFER (EXPRESS STEAMER) AUGUSTE-VICTORIA"
        ],
        "to": "EN ROUTE ABOARD SCHNELLDAMPFER (EXPRESS STEAMER) AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORF-ASTORIA",
          "THE WALDORF ASTORIA"
        ],
        "to": "THE WALDORF-ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION LEAGUE CLUB, NEW YORK, NY",
          "UNION LEAGUE CLUB, [NEW YORK, NY?]"
        ],
        "to": "UNION LEAGUE CLUB, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. GEORGE HOTEL",
          "ST.GEORGE HOTEL"
        ],
        "to": "ST. GEORGE HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S. ZEALANDIA",
          "EN ROUTE ABOARD S.S.ZEALANDIA"
        ],
        "to": "EN ROUTE ABOARD S.S. ZEALANDIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND HOTEL, LONDON, ENGLAND",
          "GRAND HOTEL,LONDON, ENGLAND"
        ],
        "to": "GRAND HOTEL, LONDON, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSE",
          "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSER"
        ],
        "to": "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LIVERPOOL [ENGLAND?}",
          "LIVERPOOL, [ENGLAND]"
        ],
        "to": "LIVERPOOL [ENGLAND?}"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAVOY HOTEL",
          "SAVOY HOTEL, (?)"
        ],
        "to": "SAVOY HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WORCESTER, MASS",
          "WORCESTER, MASS;"
        ],
        "to": "WORCESTER, MASS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. NACOOCHEE",
          "SS NACOOCHEE"
        ],
        "to": "S.S. NACOOCHEE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\"THE ARGYLE\"",
          "THE ARGYLE [?]"
        ],
        "to": "\"THE ARGYLE\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CORONADA BEACH, CA.",
          "CORONADA BEACH,CA."
        ],
        "to": "CORONADA BEACH, CA."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST. DENIS, NY",
          "HOTEL ST. DENIS,NY"
        ],
        "to": "HOTEL ST. DENIS, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ASCOT [ENGLAND]",
          "ASCOT, ENGLAND"
        ],
        "to": "ASCOT [ENGLAND]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEAN HOUSE, NEWPORT, RI",
          "OCEAN HOUSE,NEWPORT,R.I."
        ],
        "to": "OCEAN HOUSE, NEWPORT, RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE AUDITORIUM,CHICAGO,ILL;",
          "THE AUDITORIUM,[CHICAGO,ILL.]"
        ],
        "to": "THE AUDITORIUM,CHICAGO,ILL;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST GEORGE,NYACK-ON-HUDSON,NY",
          "HOTEL ST.GEORGE,NYACK-ON-HUDSON,[NY]"
        ],
        "to": "HOTEL ST GEORGE,NYACK-ON-HUDSON,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MORELLO'S, NEW YORK, NY",
          "MORELLO'S,NEW YORK, N.Y."
        ],
        "to": "MORELLO'S, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESIDENCE-PALAIS, COPENHAGEN, DENMARK",
          "[RESIDENCE-PALAIS, COPENHAGEN, DENMARK]"
        ],
        "to": "RESIDENCE-PALAIS, COPENHAGEN, DENMARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALACE HOTEL, SAN FRANCISCO, CA",
          "PALACE HOTEL, SAN FRANCISCO, CAL"
        ],
        "to": "PALACE HOTEL, SAN FRANCISCO, CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TONTINE HOTEL, NEW HAVEN, CT",
          "TONTINE HOTEL, [NEW HAVEN, CT]"
        ],
        "to": "TONTINE HOTEL, NEW HAVEN, CT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE BELLEVUE-STRATFORD, PHILADELPHIA, PA",
          "THE BELLEVUE-STRATFORD, [PHILADELPHIA, PA?]"
        ],
        "to": "THE BELLEVUE-STRATFORD, PHILADELPHIA, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MARLBOROUGH HOTEL, (?)",
          "MARLBOROUGH HOTEL, [?]"
        ],
        "to": "MARLBOROUGH HOTEL, (?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PUT-IN-BAY, OH",
          "PUT-IN-BAY, OH;"
        ],
        "to": "PUT-IN-BAY, OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUDITORIUM, THE, CHICAGO, IL",
          "AUDITORIUM,THE,[CHICAGO,IL]"
        ],
        "to": "AUDITORIUM, THE, CHICAGO, IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NARRAGANSETT HOTEL, PROVIDENCE RI",
          "NARRAGANSETT HOTEL, PROVIDENCE, RI"
        ],
        "to": "NARRAGANSETT HOTEL, PROVIDENCE RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUZERN, SWITZERLAND",
          "LUZERN,SWITZERLAND"
        ],
        "to": "LUZERN, SWITZERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PORTLAND, OR",
          "PORTLAND,OR."
        ],
        "to": "PORTLAND, OR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COCHRAN, WASHINGTON DC",
          "HOTEL COCHRAN, [WASHINGTON,D.C.]"
        ],
        "to": "HOTEL COCHRAN, WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOUTH POLAND, ME",
          "SOUTH POLAND,ME."
        ],
        "to": "SOUTH POLAND, ME"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARK ROW BLDG. [NY]",
          "PARK ROW BLDG.NY"
        ],
        "to": "PARK ROW BLDG. [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHATTANOOGA, TN",
          "CHATTANOOGA,TN"
        ],
        "to": "CHATTANOOGA, TN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE STEAMER FURST BISMARCK",
          "ENROUTE STEAMER \"FURST BISMARCK\""
        ],
        "to": "EN ROUTE STEAMER FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD U.S.M.S. ST. LOUIS",
          "ABOARD U.S.M.S.ST. LOUIS"
        ],
        "to": "ABOARD U.S.M.S. ST. LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE \"H.H.MEIER\"",
          "EN ROUTE \" H.H.MEIER\""
        ],
        "to": "EN ROUTE \"H.H.MEIER\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WACO, TX",
          "WACO,TX"
        ],
        "to": "WACO, TX"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TACOMA, [WA?}",
          "TACOMA; WA"
        ],
        "to": "TACOMA, [WA?}"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MAJESTIC [PHILADELPHIA, PA]",
          "HOTEL MAJESTIC, PHILADELPHIA, PA"
        ],
        "to": "HOTEL MAJESTIC [PHILADELPHIA, PA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KAISER WILHELM DER GROSSE",
          "S.S. \"KAISER WILHELM DER GROSSE\""
        ],
        "to": "SS KAISER WILHELM DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PFISTER HOTEL, MILWAUKEE, WI",
          "PFISTER HOTEL,MILWAUKEE,WIS."
        ],
        "to": "PFISTER HOTEL, MILWAUKEE, WI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL CONTINENTAL (PARIS, FRANCE?)",
          "HOTEL CONTINENTAL, [PARIS, FRANCE]"
        ],
        "to": "HOTEL CONTINENTAL (PARIS, FRANCE?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TORONTO, CANADA",
          "TORONTO,CANADA"
        ],
        "to": "TORONTO, CANADA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRANKFURT, GERMANY",
          "[FRANKFURT, GERMANY?]"
        ],
        "to": "FRANKFURT, GERMANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ORMOND, FL",
          "ORMOND, FL;"
        ],
        "to": "ORMOND, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMSTERDAM,HOLLAND",
          "[AMSTERDAM, HOLLAND ?]"
        ],
        "to": "AMSTERDAM,HOLLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "METROPOLITAN CLUB, NEW YORK, NY",
          "METROPOLITAN CLUB, [?NEW YORK, NY]"
        ],
        "to": "METROPOLITAN CLUB, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS KASUGA MARU",
          "EN ROUTE ABOARD SS. KASUGA MARU"
        ],
        "to": "EN ROUTE ABOARD SS KASUGA MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS \"FRIEDRICH DER GROSSE\"",
          "SS FRIEDRICH DER GROSSE"
        ],
        "to": "SS \"FRIEDRICH DER GROSSE\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HELENA, MT",
          "HELENA,MT"
        ],
        "to": "HELENA, MT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GLENWOOD SPRINGS, CO",
          "[GLENWOOD SPRINGS, CO]"
        ],
        "to": "GLENWOOD SPRINGS, CO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "130 BROADWAY, NEW YORK",
          "130 BROADWAY, [NEW YORK]"
        ],
        "to": "130 BROADWAY, NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARK ROW BUILDING [NY]",
          "PARK ROW BUILDING, [NY]"
        ],
        "to": "PARK ROW BUILDING [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "JACKSONVILLE, FL",
          "JACKSONVILLE, FL;"
        ],
        "to": "JACKSONVILLE, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. AUGUSTINE, FL",
          "ST.AUGUSTINE,FL"
        ],
        "to": "ST. AUGUSTINE, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION SQUARE, NY",
          "UNION SQUARE,NY;"
        ],
        "to": "UNION SQUARE, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE RALEIGH, WASHINGTON, DC",
          "THE RALEIGH, WASHINGTON DC"
        ],
        "to": "THE RALEIGH, WASHINGTON, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PULLMAN DINING CAR SERVICE EN ROUTE",
          "PULLMAN DINING CAR SERVICE (EN ROUTE?)"
        ],
        "to": "PULLMAN DINING CAR SERVICE EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE STEAMER AUGUSTE VICTORIA",
          "ENROUTE STEAMER \"AUGUSTE VICTORIA\""
        ],
        "to": "EN ROUTE STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS WESTERNLAND, EN ROUTE",
          "SS WESTERNLAND - EN ROUTE"
        ],
        "to": "SS WESTERNLAND, EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF-ASTORIA HOTEL, NEW YORK, NY",
          "WALDORF ASTORIA HOTEL, NEW YORK, NY"
        ],
        "to": "WALDORF-ASTORIA HOTEL, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHAMBERLIN'S, (WASHINGTON,D.C.)",
          "CHAMBERLIN'S; [WASHINGTON,DC?]"
        ],
        "to": "CHAMBERLIN'S, (WASHINGTON,D.C.)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S. SOUTHWARK",
          "ENROUTE ABOARD S.S. SOUTHWARK"
        ],
        "to": "EN ROUTE ABOARD S.S. SOUTHWARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "137 E. MADISON ST. CHICAGO, ILL.",
          "137 E. MADISON ST.,CHICAGO,ILL."
        ],
        "to": "137 E. MADISON ST. CHICAGO, ILL."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARLBOROUGH, NEW YORK, NY",
          "HOTEL MARLBOROUGH, [NEW YORK, NY]"
        ],
        "to": "HOTEL MARLBOROUGH, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADWAY, NY",
          "BROADWAY,NY"
        ],
        "to": "BROADWAY, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST.LOUIS CLUB, ST.LOUIS,MO.",
          "ST. LOUIS CLUB, [?ST. LOUIS, MO?]"
        ],
        "to": "ST.LOUIS CLUB, ST.LOUIS,MO."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MECHANICS HALL, [BOSTON, MA];",
          "MECHANICS' HALL, BOSTON, MA"
        ],
        "to": "MECHANICS HALL, [BOSTON, MA];"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 BROAD ST. NY",
          "57 BROAD ST.NY"
        ],
        "to": "57 BROAD ST. NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHATTANOOGA,TENN.",
          "CHATTANOOGA, TENN."
        ],
        "to": "CHATTANOOGA,TENN."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ASTOR, NEW YORK",
          "HOTEL ASTOR, [NEW YORK]"
        ],
        "to": "HOTEL ASTOR, NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "STEAMSHIP KAISER WILHELM DER GROSSE",
          "STEAMSHIP KAISER WILHELM DER GROSSER"
        ],
        "to": "STEAMSHIP KAISER WILHELM DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DEL CAMPIDOGLIO, NEW YORK, NY",
          "HOTEL DEL CAMPIDOGLIO, [NEW YORK, N.Y.]"
        ],
        "to": "HOTEL DEL CAMPIDOGLIO, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL CLUB, PORTLAND, OR",
          "COMMERCIAL CLUB, [PORTLAND, OR]"
        ],
        "to": "COMMERCIAL CLUB, PORTLAND, OR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "57 BROAD STREET, NY",
          "57 BROAD STREET - NY"
        ],
        "to": "57 BROAD STREET, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NYC",
          "[NYC]"
        ],
        "to": "NYC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MURRAY HILL HOTEL,NY",
          "MURRAY HILL HOTEL [NY]"
        ],
        "to": "MURRAY HILL HOTEL,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CECIL HOTEL, LONDON, ENGLAND",
          "CECIL HOTEL,LONDON,ENGLAND"
        ],
        "to": "CECIL HOTEL, LONDON, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TERRACE GARDEN",
          "TERRACE GARDEN,?"
        ],
        "to": "TERRACE GARDEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO ATHLETIC ASSOCIATION",
          "CHICAGO ATHLETIC ASSOCIATION;"
        ],
        "to": "CHICAGO ATHLETIC ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT LA PROVENCE",
          "ABOARD PAQUEBOT \"LA PROVENCE\""
        ],
        "to": "ABOARD PAQUEBOT LA PROVENCE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SPRINGFIELD,MASS.",
          "SPRINGFIELD, MASS."
        ],
        "to": "SPRINGFIELD,MASS."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ACADEMY OF MUSIC BROOKLYN, NY",
          "ACADEMY OF MUSIC, [BROOKLYN, NY]"
        ],
        "to": "ACADEMY OF MUSIC BROOKLYN, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALBANY, NY",
          "ALBANY,NY"
        ],
        "to": "ALBANY, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUDITORIUM, CHICAGO, IL",
          "AUDITORIUM,[CHICAGO, IL]"
        ],
        "to": "AUDITORIUM, CHICAGO, IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALACE HOTEL, DENVER, [COL]",
          "PALACE HOTEL;DENVER, [COL]"
        ],
        "to": "PALACE HOTEL, DENVER, [COL]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CORONADO BEACH, CA",
          "CORONADO BEACH, CA;"
        ],
        "to": "CORONADO BEACH, CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BWAY & 63RD ST. NY",
          "B'WAY & 63RD ST. NY"
        ],
        "to": "BWAY & 63RD ST. NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLUMBUS, OHIO",
          "COLUMBUS,OHIO"
        ],
        "to": "COLUMBUS, OHIO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO, [NEW YORK, NY?]",
          "DELMONICO,NEW YORK NY;"
        ],
        "to": "DELMONICO, [NEW YORK, NY?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION LEAGUE CLUB NY;",
          "UNION LEAGUE CLUB, NY"
        ],
        "to": "UNION LEAGUE CLUB NY;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFFMAN HOUSE, MADISON SQUARE, NY",
          "[HOFFMAN HOUSE,MADISON SQUARE,NY]"
        ],
        "to": "HOFFMAN HOUSE, MADISON SQUARE, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MINNEAPOLIS CLUB, MINNEAPOLIS, MN",
          "MINNEAPOLIS CLUB; MINNEAPOLIS, MN"
        ],
        "to": "MINNEAPOLIS CLUB, MINNEAPOLIS, MN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HORTICULTURAL HALL, PHILADELPHIA, PA",
          "HORTICULTURAL HALL, PHILADELPHIA [PA]"
        ],
        "to": "HORTICULTURAL HALL, PHILADELPHIA, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TREMONT TEMPLE, BOSTON, MASS.",
          "TREMONT TEMPLE,BOSTON MASS"
        ],
        "to": "TREMONT TEMPLE, BOSTON, MASS."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GERMANTOWN (PA?)",
          "[GERMANTOWN, PA?]"
        ],
        "to": "GERMANTOWN (PA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DEEMING HALL, ITHACA, NY",
          "DEEMING HALL,ITHACA,NY"
        ],
        "to": "DEEMING HALL, ITHACA, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S. FRIESLAND",
          "EN ROUTE ABOARD SS FRIESLAND"
        ],
        "to": "EN ROUTE ABOARD S.S. FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LINCOLN CLUB {BROOKLYN, NY}",
          "LINCOLN CLUB,BROOKLYN,NY"
        ],
        "to": "LINCOLN CLUB {BROOKLYN, NY}"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "114 WEST FOURTEENTH STREET, NEW YORK",
          "114 WEST FOURTEENTH STREET, [NEW YORK]"
        ],
        "to": "114 WEST FOURTEENTH STREET, NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND PACIFIC HOTEL",
          "GRAND PACIFIC HOTEL,"
        ],
        "to": "GRAND PACIFIC HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS.KOHE MARU",
          "EN ROUTE ABOARD SS. KOHE MARU"
        ],
        "to": "EN ROUTE ABOARD SS.KOHE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FARGO, NORTH DAKOTA",
          "FARGO,NORTH DAKOTA"
        ],
        "to": "FARGO, NORTH DAKOTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAMPFER; H.H. MEIER",
          "DAMPFER \"H.H. MEIER\""
        ],
        "to": "DAMPFER; H.H. MEIER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "STEAMSHIP NORTH WEST",
          "STEAMSHIP NORTHWEST"
        ],
        "to": "STEAMSHIP NORTH WEST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "139 EIGHTH STREET BET. BROADWAY AND 4TH AVE., NEW YORK [NY];",
          "139 EIGHTH STREET, BET. BROADWAY AND 4TH AVE., NEW YORK, [NY];"
        ],
        "to": "139 EIGHTH STREET BET. BROADWAY AND 4TH AVE., NEW YORK [NY];"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BANGKOK, THAILAND",
          "BANGKOK, [THAILAND]"
        ],
        "to": "BANGKOK, THAILAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUCERNE,SWITZERLAND",
          "[LUCERNE,SWITZERLAND?]"
        ],
        "to": "LUCERNE,SWITZERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "374 FIFTH AVENUE, [NY,NY]",
          "[374 FIFTH AVENUE, NY, NY]"
        ],
        "to": "374 FIFTH AVENUE, [NY,NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAMPFER KAISER WILHELM DER GROSSE;",
          "DAMPFER \"KAISER WILHELM DER GROSSE\""
        ],
        "to": "DAMPFER KAISER WILHELM DER GROSSE;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANHATTAN BEACH, LONG ISLAND [NY]",
          "MANHATTAN BEACH, LONG ISLAND, [NY]"
        ],
        "to": "MANHATTAN BEACH, LONG ISLAND [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOHEMIAN CLUB, SAN FRANCISCO, CA",
          "BOHEMIAN CLUB, SAN FRANCISCO,[CA]"
        ],
        "to": "BOHEMIAN CLUB, SAN FRANCISCO, CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. NICHOLAS HOTEL, [CINCINNATI, OH?]",
          "ST.NICHOLAS HOTEL, CINCINNATI, OH"
        ],
        "to": "ST. NICHOLAS HOTEL, [CINCINNATI, OH?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. NEW YORK",
          "USMS NEW YORK"
        ],
        "to": "U.S.M.S. NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN, NEW YORK",
          "HOTEL MANHATTAN, [NEW YORK]"
        ],
        "to": "HOTEL MANHATTAN, NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW WILLARD [WASHINGTON, [DC]",
          "NEW WILLARD, WASHINGTON, DC"
        ],
        "to": "NEW WILLARD [WASHINGTON, [DC]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION CLUB",
          "UNION CLUB, (?)"
        ],
        "to": "UNION CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COCHRAN, WASHINGTON, DC",
          "THE COCHRAN, WASHINGTON,D.C."
        ],
        "to": "THE COCHRAN, WASHINGTON, DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ARCANUM HALL,ELIZABETH NJ",
          "ARCANUM HALL,ELIZABETH,NJ"
        ],
        "to": "ARCANUM HALL,ELIZABETH NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD DAMPFER H.H. MEIER",
          "EN ROUTE ABOARD DAMPFER H.H.MEIER"
        ],
        "to": "EN ROUTE ABOARD DAMPFER H.H. MEIER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ADIRONDACKS, NY",
          "ADIRONDACKS [NY]"
        ],
        "to": "ADIRONDACKS, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GERMANY(?)",
          "[GERMANY]"
        ],
        "to": "GERMANY(?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD ABOVE",
          "EN ROUTE ABOARD ABOVE (?)"
        ],
        "to": "EN ROUTE ABOARD ABOVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALNUT ROOMS, THE GRAND HOTEL, TRAFALGAR SQUARE, LONDON, ENGLAND",
          "THE WALNUT ROOMS; THE GRAND HOTEL, TRAFALGAR SQUARE, [LONDON,ENGLAND]"
        ],
        "to": "THE WALNUT ROOMS, THE GRAND HOTEL, TRAFALGAR SQUARE, LONDON, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROUND TABLE CLUB",
          "[ROUND TABLE CLUB]"
        ],
        "to": "ROUND TABLE CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS. KASUGA",
          "EN ROUTE ABOARD SS KASUGA"
        ],
        "to": "EN ROUTE ABOARD SS. KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS. KINSHIN MARU",
          "EN ROUTE ABOARD SS.KINSHIN MARU"
        ],
        "to": "EN ROUTE ABOARD SS. KINSHIN MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS TRINIDAD",
          "S.S. \"TRINIDAD\""
        ],
        "to": "SS TRINIDAD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND HOTEL, MELBOURNE;",
          "GRAND HOTEL,MELBOURNE"
        ],
        "to": "GRAND HOTEL, MELBOURNE;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PENN.",
          "PENN;"
        ],
        "to": "PENN."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY, NEW YORK, NY",
          "HOTEL SAVOY,NEW YORK,NY"
        ],
        "to": "HOTEL SAVOY, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW HAVEN CT",
          "NEW HAVEN [CT]"
        ],
        "to": "NEW HAVEN CT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD S S VADERLAND",
          "ABOARD S.S. VADERLAND"
        ],
        "to": "ABOARD S S VADERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. ZEALANDIA",
          "SS ZEALANDIA"
        ],
        "to": "S.S. ZEALANDIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIAMI BISCAYNE BAY, FL",
          "MIAMI BISCAYNE BAY,FL"
        ],
        "to": "MIAMI BISCAYNE BAY, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DWLMONICO'S NY",
          "DWLMONICO'S,NY"
        ],
        "to": "DWLMONICO'S NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEST END HOTEL, NEW ORLEANS, LA",
          "WEST END HOTEL, NEW ORLEANS,LA."
        ],
        "to": "WEST END HOTEL, NEW ORLEANS, LA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FAIRMONT HOTEL [SAN FRANCISCO, CA]",
          "FAIRMONT HOTEL, SAN FRANCISCO, CA"
        ],
        "to": "FAIRMONT HOTEL [SAN FRANCISCO, CA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO'S",
          "DELMONICOS"
        ],
        "to": "DELMONICO'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHANLEY'S, NY",
          "SHANLEY'S,NY"
        ],
        "to": "SHANLEY'S, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALAIS ROYAL - CHRISTIANIA,NORWAY",
          "[PALAIS ROYAL, CHRISTIANIA, NORWAY]"
        ],
        "to": "PALAIS ROYAL - CHRISTIANIA,NORWAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BRUNSWICK,THE,BOSTON,[MASS]",
          "BRUNSWICK,THE,BOSTON[MASS]"
        ],
        "to": "BRUNSWICK,THE,BOSTON,[MASS]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALBANY CLUB (ALBANY,NY)",
          "ALBANY CLUB, ALBANY, NY"
        ],
        "to": "ALBANY CLUB (ALBANY,NY)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PINEHURST,N.C.",
          "PINEHURST, NC"
        ],
        "to": "PINEHURST,N.C."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST. GEORGE, NYACK, NY",
          "HOTEL ST. GEORGE,NYACK,NY"
        ],
        "to": "HOTEL ST. GEORGE, NYACK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINING CAR",
          "DINING CAR;"
        ],
        "to": "DINING CAR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "383 6TH AVE.,1212 BWAY.,& 1476 BWAY. NY",
          "383 6TH AVE.,1476 BWAY.,1212 BWAY., NY"
        ],
        "to": "383 6TH AVE.,1212 BWAY.,& 1476 BWAY. NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARLBOROUGH",
          "HOTEL MARLBOROUGH, (?)"
        ],
        "to": "HOTEL MARLBOROUGH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASHVILLE, TENN.",
          "NASHVILLE, TENN;"
        ],
        "to": "NASHVILLE, TENN."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CATARACT HOUSE, NIAGARA FALLS, NY",
          "CATARACT HOUSE,NIAGARA FALLS,NY"
        ],
        "to": "CATARACT HOUSE, NIAGARA FALLS, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAYLOR'S HOTEL, JERSEY CITY [NJ]",
          "TAYLOR'S HOTEL, JERSEY CITY, N.J."
        ],
        "to": "TAYLOR'S HOTEL, JERSEY CITY [NJ]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. DENIS HOTEL",
          "ST. DENIS HOTEL, (?)"
        ],
        "to": "ST. DENIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAMPA, FLORIDA",
          "TAMPA,FLORIDA"
        ],
        "to": "TAMPA, FLORIDA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT LA LORRAINE",
          "ABOARD PAQUEBOT \"LA LORRAINE\""
        ],
        "to": "ABOARD PAQUEBOT LA LORRAINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT \"LA SAVOIE\"",
          "ABOARD PAQUEBOT LA SAVOIE"
        ],
        "to": "ABOARD PAQUEBOT \"LA SAVOIE\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD 'PRINZ FRIEDRICH WILHELM'",
          "ABOARD PRINZ FRIEDRICH WILHELM''"
        ],
        "to": "ABOARD 'PRINZ FRIEDRICH WILHELM'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SIXTY-SIXTH STREET & BROADWAY, NEW YORK, [NY]",
          "SIXTY SIXTH STREET & BROADWAY, NEW YORK,[NY]"
        ],
        "to": "SIXTY-SIXTH STREET & BROADWAY, NEW YORK, [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RECTOR'S ,NY",
          "RECTOR'S,NY"
        ],
        "to": "RECTOR'S ,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CITY, DELMONICO'S",
          "NEW YORK CITY; DELMONICO'S"
        ],
        "to": "NEW YORK CITY, DELMONICO'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BAR HARBOR [ME]",
          "BAR HARBOR, ME"
        ],
        "to": "BAR HARBOR [ME]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SCHNELLDAMPFER \"AUGUSTE VICTORIA\"",
          "SCHNELLDAMPFER: \"AUGUSTE VICTORIA\""
        ],
        "to": "SCHNELLDAMPFER \"AUGUSTE VICTORIA\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELMAR,NJ",
          "BELMAR, NJ"
        ],
        "to": "BELMAR,NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AZ",
          "[AZ]"
        ],
        "to": "AZ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL STENTON [PHILADELPHIA PA]",
          "HOTEL STENTON, PHILADELPHIA, PA"
        ],
        "to": "HOTEL STENTON [PHILADELPHIA PA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BAKER CITY, OREGON;",
          "BAKER CITY,OREGON"
        ],
        "to": "BAKER CITY, OREGON;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIRAMAR (?)",
          "[MIRAMAR?]"
        ],
        "to": "MIRAMAR (?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SARATOGA, NY",
          "SARATOGA, [NY]"
        ],
        "to": "SARATOGA, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CONVENTION HALL, (BUFFALO, NY?)",
          "CONVENTION HALL, BUFFALO, NY"
        ],
        "to": "CONVENTION HALL, (BUFFALO, NY?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUTLER, PA",
          "BUTLER, PA."
        ],
        "to": "BUTLER, PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH ST. & BWAY NY",
          "66TH ST & B'WAY, NY"
        ],
        "to": "66TH ST. & BWAY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\"ST. LOUIS\"",
          "\"ST.LOUIS\""
        ],
        "to": "\"ST. LOUIS\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIAGARA FALLS, NY",
          "NIAGARA FALLS,NY"
        ],
        "to": "NIAGARA FALLS, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VICTORY, PUT-IN-BAY-ISLAND, LAKE ERIE, OH.",
          "HOTEL VICTORY,PUT-IN-BAY ISLAND,LAKE ERIE,OH"
        ],
        "to": "HOTEL VICTORY, PUT-IN-BAY-ISLAND, LAKE ERIE, OH."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARK ROW BUILDING [NEW YORK,NY?]",
          "PARK ROW BUILDING, NEW YORK, NY"
        ],
        "to": "PARK ROW BUILDING [NEW YORK,NY?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO,[NY]",
          "DELMONICO [NY]"
        ],
        "to": "DELMONICO,[NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CITY, NY",
          "NEW YORK CITY,NY"
        ],
        "to": "NEW YORK CITY, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH STREET AND BROADWAY,NEW YORK,NY",
          "[66TH STREET AND BROADWAY,NEW YORK,NY]"
        ],
        "to": "66TH STREET AND BROADWAY,NEW YORK,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION SQUARE, NEW YORK, NY",
          "UNION SQUARE,NEW YORK,NY"
        ],
        "to": "UNION SQUARE, NEW YORK, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD SS KAMAKURA MARU",
          "ABOARD SS KAMAKURA MARU;"
        ],
        "to": "ABOARD SS KAMAKURA MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE BOURSE, PHILADELPHIA [PA]",
          "THE BOURSE,(PHILADELPHIA,PA)"
        ],
        "to": "THE BOURSE, PHILADELPHIA [PA]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARKER HOUSE, BOSTON, MA",
          "PARKER HOUSE,BOSTON,MA"
        ],
        "to": "PARKER HOUSE, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINDSOR CASTLE, ENGLAND",
          "WINDSOR CASTLE, [ENGLAND]"
        ],
        "to": "WINDSOR CASTLE, ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS OCEANIC",
          "R.M.S. OCEANIC"
        ],
        "to": "RMS OCEANIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALM BEACH, FL",
          "PALM BEACH,FL"
        ],
        "to": "PALM BEACH, FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "YOUNG'S HOTEL",
          "YOUNG'S HOTEL [?]"
        ],
        "to": "YOUNG'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT LA TOURAINE",
          "ABOARD PAQUEBOT \"LA TOURAINE\""
        ],
        "to": "ABOARD PAQUEBOT LA TOURAINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S.S. \"KOBE WARU\"",
          "EN ROUTE ABOARD S.S. KOBE WARU"
        ],
        "to": "EN ROUTE ABOARD S.S. \"KOBE WARU\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BATTLE CREEK, MI",
          "BATTLE CREEK, MI;"
        ],
        "to": "BATTLE CREEK, MI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(CALIFORNIA?)",
          "CALIFORNIA"
        ],
        "to": "(CALIFORNIA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MUNICH, GERMANY",
          "MUNICH,GERMANY"
        ],
        "to": "MUNICH, GERMANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "156 SECOND AVENUE (NY?)",
          "156 SECOND AVENUE, [NY]"
        ],
        "to": "156 SECOND AVENUE (NY?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. DENIS HOTEL (NEW YORK?)",
          "ST. DENIS HOTEL, NEW YORK"
        ],
        "to": "ST. DENIS HOTEL (NEW YORK?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF [NY]",
          "WALDORF[NY]"
        ],
        "to": "WALDORF [NY]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REVERE HOUSE, [BOSTON,MASS]",
          "REVERE HOUSE,BOSTON,MASS."
        ],
        "to": "REVERE HOUSE, [BOSTON,MASS]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASSAU,BAHAMAS",
          "NASSAU, BAHAMAS"
        ],
        "to": "NASSAU,BAHAMAS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RUSSELL HOUSE, DETROIT, MI",
          "RUSSELL HOUSE; DETROIT, MI"
        ],
        "to": "RUSSELL HOUSE, DETROIT, MI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT \"LA BRETAGNE\"",
          "ABOARD PAQUEBOT LA BRETAGNE"
        ],
        "to": "ABOARD PAQUEBOT \"LA BRETAGNE\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NOS. 667 TO 677 [BROADWAY], OPPOSITE BOND STREET, MIDWAY BETWEEN BATTERY AND CENTRAL PARK, NEW YORK [NY];",
          "NOS. 667 TO 677 [BROADWAY], OPPOSITE BOND STREET, MIDWAY BETWEEN BATTERY AND CENTRAL PARK, NEW YORK, [NY];"
        ],
        "to": "NOS. 667 TO 677 [BROADWAY], OPPOSITE BOND STREET, MIDWAY BETWEEN BATTERY AND CENTRAL PARK, NEW YORK [NY];"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD EXPRESS STEAMER AUGUSTE VICTORIA",
          "ENROUTE ABOARD EXPRESS-STEAMER AUGUSTE VICTORIA"
        ],
        "to": "EN ROUTE ABOARD EXPRESS STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRANCONIA NOTCH NH",
          "FRANCONIA NOTCH NH,"
        ],
        "to": "FRANCONIA NOTCH NH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "QUEEN CITY CLUB, (CINCINNATI,OHIO)",
          "QUEEN CITY CLUB, CINCINNATI ,OHIO"
        ],
        "to": "QUEEN CITY CLUB, (CINCINNATI,OHIO)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MAXWELL HOUSE, NASHVILLE, [TN];",
          "MAXWELL HOUSE, NASHVILLE, TN"
        ],
        "to": "MAXWELL HOUSE, NASHVILLE, [TN];"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CAMPOBELLO ISLAND",
          "CAMPOBELLO ISLAND,"
        ],
        "to": "CAMPOBELLO ISLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EAGLE HOTEL (GETTYSBURG, PA?)",
          "EAGLE HOTEL, GETTYSBURG, PA"
        ],
        "to": "EAGLE HOTEL (GETTYSBURG, PA?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LINCOLN CLUB - NY",
          "LINCOLN CLUB [NY]"
        ],
        "to": "LINCOLN CLUB - NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ASHEVILLE,NC",
          "ASHEVILLE, NC"
        ],
        "to": "ASHEVILLE,NC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MALONE, NY",
          "MALONE,NY"
        ],
        "to": "MALONE, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME, BOSTON,MASS",
          "HOTEL VENDOME; [BOSTON, MASS]"
        ],
        "to": "HOTEL VENDOME, BOSTON,MASS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FARGO, ND",
          "FARGO,ND"
        ],
        "to": "FARGO, ND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MAGDEBURG, [GERMANY?]",
          "MAGDEBURG,[GERMANY]"
        ],
        "to": "MAGDEBURG, [GERMANY?]"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WATSON HOUSE, BABLON, L.I., N.Y.",
          "WATSON HOUSE,BABLON, L.I. N.Y."
        ],
        "to": "WATSON HOUSE, BABLON, L.I., N.Y."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUDITORIUM",
          "AUDITORIUM, (?)"
        ],
        "to": "AUDITORIUM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MOBILE,AL.",
          "MOBILE; AL"
        ],
        "to": "MOBILE,AL."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMERICAN INN, PORTLAND OR",
          "AMERICAN INN, PORTLAND,OR"
        ],
        "to": "AMERICAN INN, PORTLAND OR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LAKE GEORGE,NY",
          "[LAKE GEORGE, NY]"
        ],
        "to": "LAKE GEORGE,NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PFISTER, MILWAUKEE, WI",
          "HOTEL PFISTER, MILWAUKEE WI"
        ],
        "to": "HOTEL PFISTER, MILWAUKEE, WI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARKER HOUSE, MASS;",
          "PARKER HOUSE,[MASS]"
        ],
        "to": "PARKER HOUSE, MASS;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND PACIFIC HOTEL, CHICAGO, IL",
          "GRAND PACIFIC HOTEL [CHICAGO, IL];"
        ],
        "to": "GRAND PACIFIC HOTEL, CHICAGO, IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BRUNSWICK ME?",
          "BRUNSWICK,ME."
        ],
        "to": "BRUNSWICK ME?"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD SS KASUGA;",
          "ABOARD SS KASUGA"
        ],
        "to": "ABOARD SS KASUGA;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAWLING, NY",
          "PAWLING NY(?)"
        ],
        "to": "PAWLING, NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BRUNSWICK, BOSTON, MA",
          "HOTEL BRUNSWICK, BOSTON [MA]"
        ],
        "to": "HOTEL BRUNSWICK, BOSTON, MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUDAPEST, HUNGARY",
          "BUDAPEST, (HUNGARY)"
        ],
        "to": "BUDAPEST, HUNGARY"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_uncertain at index 23 based on column place_case using expression jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_uncertain",
    "columnInsertIndex": 23,
    "baseColumnName": "place_case",
    "expression": "jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column place_grel at index 25 based on column place_cluster using expression grel:value.replace(';','')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "place_grel",
    "columnInsertIndex": 25,
    "baseColumnName": "place_cluster",
    "expression": "grel:value.replace(';','')",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_case at index 27 based on column physical_description using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_case",
    "columnInsertIndex": 27,
    "baseColumnName": "physical_description",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_count at index 28 based on column physical_description_case using expression jython:return len(value.split(';'))",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "physical_description_count",
          "expression": "value",
          "columnName": "physical_description_count",
          "from": 6.22,
          "to": 7.02,
          "selectNumeric": true,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_count",
    "columnInsertIndex": 28,
    "baseColumnName": "physical_description_case",
    "expression": "jython:return len(value.split(';'))",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-split",
    "description": "Split column physical_description_case by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description_case",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": ";",
    "regex": false,
    "maxColumns": 6
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 1 to physical_description_1",
    "oldColumnName": "physical_description_case 1",
    "newColumnName": "physical_description_1"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 2 to physical_description_2",
    "oldColumnName": "physical_description_case 2",
    "newColumnName": "physical_description_2"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 3 to physical_description_3",
    "oldColumnName": "physical_description_case 3",
    "newColumnName": "physical_description_3"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 4 to physical_description_4",
    "oldColumnName": "physical_description_case 4",
    "newColumnName": "physical_description_4"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 5 to physical_description_5",
    "oldColumnName": "physical_description_case 5",
    "newColumnName": "physical_description_5"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column physical_description_case 6 to physical_description_6",
    "oldColumnName": "physical_description_case 6",
    "newColumnName": "physical_description_6"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column occasion_case at index 36 based on column occasion using expression jython:return value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "occasion_case",
    "columnInsertIndex": 36,
    "baseColumnName": "occasion",
    "expression": "jython:return value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion_case using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_case",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column occasion_grel at index 37 based on column occasion_case using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "occasion_grel",
    "columnInsertIndex": 37,
    "baseColumnName": "occasion_case",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "keep-original"
  },
  {
    "op": "core/column-split",
    "description": "Split column occasion_grel by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_grel",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": ";",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column occasion_grel 1 to occasion_1",
    "oldColumnName": "occasion_grel 1",
    "newColumnName": "occasion_1"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column occasion_grel 2 to occasion_2",
    "oldColumnName": "occasion_grel 2",
    "newColumnName": "occasion_2"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion_1 using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_1",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion_2 using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_2",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion_1",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_1",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (SOC)",
          "OTHER (SOC?)",
          "OTHER [SOC?]",
          "OTHER (SOC.)",
          "OTHER )SOC)",
          "OTHER [SOC]",
          "OTHER, [SOC?]"
        ],
        "to": "OTHER (SOC)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "ANNIVERSARY (?)",
          "ANNIVERSARY(?)",
          "ANNIVERSARY.",
          "ANNIVERSARY?"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMPL",
          "COMPL.",
          "COMPL?",
          "COMPL (?)",
          "COMPL(?)"
        ],
        "to": "COMPL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNUAL EVENT)",
          "OTHER,ANNUAL EVENT",
          "OTHER {ANNUAL EVENT}",
          "OTHER, ANNUAL EVENT"
        ],
        "to": "OTHER (ANNUAL EVENT)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNIVERSARY)",
          "OTHER (ANNIVERSARY?)",
          "OTHER - ANNIVERSARY",
          "OTHER {ANNIVERSARY}"
        ],
        "to": "OTHER (ANNIVERSARY)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIV?",
          "?ANNIV?",
          "ANNIV"
        ],
        "to": "ANNIV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (SOCIAL?)",
          "OTHER (SOCIAL)",
          "OTHER [SOCIAL]"
        ],
        "to": "OTHER (SOCIAL)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNUAL MEETING)",
          "OTHER {ANNUAL MEETING}",
          "OTHER,ANNUAL MEETING"
        ],
        "to": "OTHER (ANNUAL MEETING)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (COMMEMORATIVE)",
          "OTHER (COMMEMORATIVE?)",
          "OTHER [COMMEMORATIVE]"
        ],
        "to": "OTHER (COMMEMORATIVE)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RELIG. HOLIDAY",
          "RELIG HOLIDAY",
          "RELIG.HOLIDAY"
        ],
        "to": "RELIG. HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECULAR HOLIDAY. HOLIDAY",
          "SECULAR HOLIDAY HOLIDAY",
          "SECULAR HOLIDAY.HOLIDAY"
        ],
        "to": "SECULAR HOLIDAY. HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?REUNION?",
          "RE-UNION",
          "REUNION"
        ],
        "to": "REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILYMENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANIV",
          "ANIV?"
        ],
        "to": "ANIV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (MEETING)",
          "OTHER (MEETING?)"
        ],
        "to": "OTHER (MEETING)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "POL",
          "POL?"
        ],
        "to": "POL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIAL",
          "SOCIAL?"
        ],
        "to": "SOCIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (COMMEMORATION)",
          "OTHER,COMMEMORATION"
        ],
        "to": "OTHER (COMMEMORATION)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNUAL BANQUET)",
          "OTHER,ANNUAL BANQUET"
        ],
        "to": "OTHER (ANNUAL BANQUET)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY",
          "DAILY?"
        ],
        "to": "DAILY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC",
          "SOC?"
        ],
        "to": "SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATRIOTIC HOLIDAY. HOLIDAY",
          "PATRIOTIC HOLIDAY.HOLIDAY"
        ],
        "to": "PATRIOTIC HOLIDAY. HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER",
          "OTHER,"
        ],
        "to": "OTHER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATRIOTIC HOLIDAY",
          "PATRIOTIC HOLIDAY."
        ],
        "to": "PATRIOTIC HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNUAL DINNER)",
          "OTHER,,ANNUAL DINNER"
        ],
        "to": "OTHER (ANNUAL DINNER)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRIP OF PRES. MCKINLEY, HIS CABINET & GUESTS",
          "TRIP OF PRES. MCKINLEY,HIS CABINET & GUESTS"
        ],
        "to": "TRIP OF PRES. MCKINLEY, HIS CABINET & GUESTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (ANNIV)",
          "OTHER (ANNIV?)"
        ],
        "to": "OTHER (ANNIV)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER (REUNION)",
          "OTHER - REUNION?"
        ],
        "to": "OTHER (REUNION)"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion_2",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion_2",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " FOR MAHARAJA SCINDIYA",
          "FOR MAHARAJA SCINDIYA"
        ],
        "to": " FOR MAHARAJA SCINDIYA"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column occassion_uncertain at index 38 based on column occasion_grel using expression jython:if value is not None and '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "occassion_uncertain",
    "columnInsertIndex": 38,
    "baseColumnName": "occasion_grel",
    "expression": "jython:if value is not None and '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column keywords",
    "columnName": "keywords"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column language",
    "columnName": "language"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column location_case at index 45 based on column location using expression jython:return value.upper()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "location_case",
    "columnInsertIndex": 45,
    "baseColumnName": "location",
    "expression": "jython:return value.upper()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column location_grel at index 46 based on column location_case using expression grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "location_grel",
    "columnInsertIndex": 46,
    "baseColumnName": "location_case",
    "expression": "grel:value.replace(/^\\((.*)\\)$/,\"$1\").replace(/^\\[(.*)\\]$/,\"$1\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column location_cluster at index 47 based on column location_grel using expression grel:value",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "location_cluster",
    "columnInsertIndex": 47,
    "baseColumnName": "location_grel",
    "expression": "grel:value",
    "onError": "set-to-blank"
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location_cluster",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location_cluster",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FIFTH AVENUE HOTEL",
          "FIFTH AVENUE HOTEL (?)",
          "FIFTH AVENUE HOTEL?",
          "(FIFTH AVENUE HOTEL?}"
        ],
        "to": "FIFTH AVENUE HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDDEUTSCHER LLOYD, BREMEN",
          "NORDDEUTSCHER LLOYD BREMEN;"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA S.S.KASUGA",
          "NIPPON YUSEN KAISHA S.S. KASUGA",
          "NIPPON YUSEN KAISHA SS KASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA S.S.KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CIE GLE TRANSATLANTIQUE",
          "CIE. GLE. TRANSATLANTIQUE",
          "CIE.GLE. TRANSATLANTIQUE"
        ],
        "to": "CIE GLE TRANSATLANTIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRIENDLY SONS OF ST. PATRICK",
          "FRIENDLY SONS OF ST PATRICK",
          "FRIENDLY SONS OF ST.PATRICK"
        ],
        "to": "FRIENDLY SONS OF ST. PATRICK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S. NEW YORK",
          "USMS NEW YORK",
          "U.S.M.S NEW YORK"
        ],
        "to": "U.S.M.S. NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENZIE'S HOTEL",
          "MENZIES HOTEL",
          "MENZIES'HOTEL"
        ],
        "to": "MENZIE'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESTAURANT NAME AND/OR LOCATION NOT GIVEN",
          "RESTAURANT NAME AND/OR LOCATION NOT GIVEN]",
          "[RESTAURANT NAME AND/OR LOCATION NOT GIVEN"
        ],
        "to": "RESTAURANT NAME AND/OR LOCATION NOT GIVEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS",
          "DELMONICO'S",
          "DELMONICOS."
        ],
        "to": "DELMONICOS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE MERCHANT'S CLUB",
          "THE MERCHANTS CLUB",
          "THE MERCHANTS' CLUB"
        ],
        "to": "THE MERCHANT'S CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RIGGS'",
          "RIGG'S",
          "RIGGS"
        ],
        "to": "RIGGS'"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. RALEIGH",
          "U.S.S.RALEIGH",
          "U.S.S.S.RALEIGH"
        ],
        "to": "U.S.S. RALEIGH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH & MCNELL'S",
          "SMITH & MCNELLS",
          "SMITH & MC NELLS"
        ],
        "to": "SMITH & MCNELL'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFBRAU HAUS",
          "HOFBRAUHAUS",
          "HOF BRAU HAUS"
        ],
        "to": "HOFBRAU HAUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. NEW YORK",
          "U.S.S. NEW YORK",
          "U.S.S. NEW YORK (?)"
        ],
        "to": "U. S. S. NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF ASTORIA",
          "WALDORF-ASTORIA",
          "WALDORF ASTORIA?"
        ],
        "to": "WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EDWARD F. LANG'S LADIES AND GENTS LUNCH ROOM AND RESTAURANT",
          "EDWARD F. LANG'S LADIES' AND GENT'S LUNCH ROOM AND RESTAURANT",
          "EDWARD F. LANG'S LADIES' AND GENT'S LUNCH ROOM AND RESTAURANT;"
        ],
        "to": "EDWARD F. LANG'S LADIES AND GENTS LUNCH ROOM AND RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA S.S.KOBE MARU",
          "NIPPON YUSEN KAISHA S.S. KOBE MARU",
          "NIPPPON YUSEN KAISHA S.S. KOBE MARU"
        ],
        "to": "NIPPON YUSEN KAISHA S.S.KOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.",
          "USMS",
          "U.S.M.S"
        ],
        "to": "U.S.M.S."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMERICAN MEDICAL EDITOR'S ASSOCIATION",
          "AMERICAN MEDICAL EDITORS' ASSOCIATION",
          "AMERICAN MEDICAL EDITORS ASSOCIATION"
        ],
        "to": "AMERICAN MEDICAL EDITOR'S ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHILDS",
          "CHILDS'",
          "CHILD'S"
        ],
        "to": "CHILDS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. OCEANIC",
          "RMS OCEANIC",
          "R.M.S.OCEANIC"
        ],
        "to": "R.M.S. OCEANIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCHANT'S CLUB",
          "MERCHANTS' CLUB",
          "MERCHANTS CLUB"
        ],
        "to": "MERCHANT'S CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIETA LA PIEMONTESE",
          "SOCIETA'LA PIEMONTESE"
        ],
        "to": "SOCIETA LA PIEMONTESE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DUPONT",
          "HOTEL DU PONT"
        ],
        "to": "HOTEL DUPONT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MOUQUIN RESTAURANT AND WINE CO",
          "MOUQUIN RESTAURANT AND WINE CO."
        ],
        "to": "MOUQUIN RESTAURANT AND WINE CO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A.H. MEYER RATHSKELLER",
          "A.H.MEYER RATHSKELLER"
        ],
        "to": "A.H. MEYER RATHSKELLER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS ST LOUIS",
          "U.S.M.S. ST. LOUIS"
        ],
        "to": "USMS ST LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE S.S.FRIESLAND",
          "RED STAR LINE SS FRIESLAND"
        ],
        "to": "RED STAR LINE S.S.FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ELKS CLUB HOUSE",
          "ELKS' CLUB HOUSE"
        ],
        "to": "ELKS CLUB HOUSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S. S. PRESIDENT WILSON",
          "S.S. PRESIDENT WILSON"
        ],
        "to": "S. S. PRESIDENT WILSON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD HOTEL",
          "THE NEW WILLARD HOTEL."
        ],
        "to": "THE NEW WILLARD HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNITED STATES GOVERNMENT",
          "UNITED STATES GOVERNMENT?"
        ],
        "to": "UNITED STATES GOVERNMENT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUBEN'S",
          "REUBEN'S."
        ],
        "to": "REUBEN'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE - STRATFORD",
          "BELLEVUE-STRATFORD"
        ],
        "to": "BELLEVUE - STRATFORD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNITED AIR LINES",
          "UNITED AIRLINES"
        ],
        "to": "UNITED AIR LINES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESAURANT AND CAFE",
          "FLATIRON RESAURANT AND CAFE"
        ],
        "to": "FLAT IRON RESAURANT AND CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "? CLUB",
          "CLUB"
        ],
        "to": "? CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. GEORGE'S SOCIETY",
          "ST. GEORGES SOCIETY"
        ],
        "to": "ST. GEORGE'S SOCIETY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ENGLAND SHORTHAND REPORTERS' ASSOCIATION",
          "NEW ENGLAND SHORTHAND REPORTER'S ASSOCIATION"
        ],
        "to": "NEW ENGLAND SHORTHAND REPORTERS' ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WABASH RAILWAY COMPANY",
          "WABASH [RAILWAY COMPANY]"
        ],
        "to": "WABASH RAILWAY COMPANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY PLAZA",
          "COPLEY-PLAZA"
        ],
        "to": "COPLEY PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHANLEY'S",
          "SHANLEYS"
        ],
        "to": "SHANLEY'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE STRATFORD HOTEL",
          "BELLEVUE-STRATFORD HOTEL"
        ],
        "to": "BELLEVUE STRATFORD HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUNDESHAUS RESTAURANT",
          "BUNDESHAUSRESTAURANT"
        ],
        "to": "BUNDESHAUS RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMSTERDAM",
          "S.S.AMSTERDAM"
        ],
        "to": "S.S. AMSTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO. S.S. ALBERTA",
          "CANADIAN PACIFIC RAILWAY CO. S.S.ALBERTA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO. S.S. ALBERTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SCHWARZWALDER'S NATUR WEINHAUS",
          "SCHWARZWALDERS NATUR WEINHAUS"
        ],
        "to": "SCHWARZWALDER'S NATUR WEINHAUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAQUEBOT \\FRANCE\\\"\"",
          "PAQUEBOT FRANCE"
        ],
        "to": "PAQUEBOT \\FRANCE\\\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CAFÉ DES BEAUX ARTS",
          "CAFÉ DES BEAUX-ARTS"
        ],
        "to": "CAFÉ DES BEAUX ARTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHILDS' LUNCH ROOMS",
          "CHILD'S LUNCH ROOMS"
        ],
        "to": "CHILDS' LUNCH ROOMS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE S.S. SOUTHWARK",
          "RED STAR LINE S.S.SOUTHWARK"
        ],
        "to": "RED STAR LINE S.S. SOUTHWARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "IMPERIAL",
          "IMPERIAL (?)"
        ],
        "to": "IMPERIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. SAN FRANCISCO",
          "U.S.S.SAN FRANCISCO"
        ],
        "to": "U.S.S. SAN FRANCISCO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ROUND TABLE",
          "THE ROUNDTABLE"
        ],
        "to": "THE ROUND TABLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL KNICKERBOCKER",
          "HOTEL KNICKERBOCKER (?)"
        ],
        "to": "HOTEL KNICKERBOCKER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY'S",
          "SHERRYS"
        ],
        "to": "SHERRY'S"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. GEORGE'S SOCIETY OF NEW YORK",
          "ST.GEORGE'S SOCIETY OF NEW YORK"
        ],
        "to": "ST. GEORGE'S SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NATIONAL COOPER'S ASSOCIATION",
          "NATIONAL COOPERS ASSOCIATION"
        ],
        "to": "NATIONAL COOPER'S ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUSINESS MEN'S LEAGUE OF ST. LOUIS",
          "BUSINESS MEN'S LEAGUE OF ST.LOUIS"
        ],
        "to": "BUSINESS MEN'S LEAGUE OF ST. LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIG'N WHISTLE",
          "PIG N'WHISTLE"
        ],
        "to": "PIG'N WHISTLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. REGIS HOTEL",
          "ST.REGIS HOTEL"
        ],
        "to": "ST. REGIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES COMMANDERY OF THE STATE OF MINNESOTA",
          "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES. COMMANDERY OF THE STATE OF MINNESOTA"
        ],
        "to": "MILITARY ORDER OF THE LOYAL LEGION OF THE UNITED STATES COMMANDERY OF THE STATE OF MINNESOTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S NEW AMSTERDAM",
          "S.S. NEW AMSTERDAM"
        ],
        "to": "S.S NEW AMSTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RIGG'S TWENTIETH STREET RESTAURANT",
          "RIGGS' TWENTIETH STREET RESTAURANT"
        ],
        "to": "RIGG'S TWENTIETH STREET RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. WYOMING",
          "U.S.S. WYOMING"
        ],
        "to": "U. S. S. WYOMING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PENN RR PULLMAN DINING CAR SERVICE",
          "PENN. RR PULLMAN DINING CAR SERVICE"
        ],
        "to": "PENN RR PULLMAN DINING CAR SERVICE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMERICAN BANKERS ASSOCIATION",
          "AMERICAN BANKERS' ASSOCIATION"
        ],
        "to": "AMERICAN BANKERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK",
          "SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
        ],
        "to": "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALTA VISTA HOTEL",
          "ALTA VISTA HOTEL (?)"
        ],
        "to": "ALTA VISTA HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. PARTHIA",
          "R.M.S. \"PARTHIA\"\"\""
        ],
        "to": "R.M.S. PARTHIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GROCERS HALL",
          "GROCERS' HALL"
        ],
        "to": "GROCERS HALL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROGERS'RESTAURANT",
          "ROGER'S RESTAURANT"
        ],
        "to": "ROGERS'RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CROMWELL STEAMSHIP COMPANY",
          "CROMWELLL STEAMSHIP COMPANY"
        ],
        "to": "CROMWELL STEAMSHIP COMPANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE SS WESTERNLAND",
          "RED STAR LINE S.S.WESTERNLAND"
        ],
        "to": "RED STAR LINE SS WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WILLARD'S HOTEL",
          "WILLARDS HOTEL"
        ],
        "to": "WILLARD'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "O.D.",
          "O. D."
        ],
        "to": "O.D."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "B&O BLUE LINE",
          "B.& O. BLUE LINE"
        ],
        "to": "B&O BLUE LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.G.(?)",
          "RG"
        ],
        "to": "R.G.(?)"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. ANDREW'S SOCIETY OF THE STATE OF NEW YORK",
          "ST.ANDREWS SOCIETY OF THE STATE OF NEW YORK"
        ],
        "to": "ST. ANDREW'S SOCIETY OF THE STATE OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK",
          "THE NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
        ],
        "to": "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S ST. PAUL",
          "U.S.M.S.ST. PAUL"
        ],
        "to": "U.S.M.S ST. PAUL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO. S.S.ATHABASCA",
          "CANADIAN PACIFIC RAILWAY CO. S.S. ATHABASCA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO. S.S.ATHABASCA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDEUTSCHER LLOYD BREMEN",
          "NORDEUTSCHER LLOYD, BREMEN"
        ],
        "to": "NORDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL LA SALLE",
          "HOTEL LASALLE"
        ],
        "to": "HOTEL LA SALLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. CHARLES HOTEL",
          "ST CHARLES HOTEL"
        ],
        "to": "ST. CHARLES HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. FRANCIS HOTEL",
          "ST.FRANCIS HOTEL"
        ],
        "to": "ST. FRANCIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SANTA FE ROUTE",
          "SANTA FE' ROUTE"
        ],
        "to": "SANTA FE ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCHANT'S CLUB OF BOSTON",
          "MERCHANTS' CLUB OF BOSTON"
        ],
        "to": "MERCHANT'S CLUB OF BOSTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ADAMS' RESTAURANT",
          "ADAM'S RESTAURANT"
        ],
        "to": "ADAMS' RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANCIENT AND HONORABLE ARTILLERY CO OF MASSACHUSETTS",
          "ANCIENT AND HONORABLE ARTILLERY CO. OF MASSACHUSETTS"
        ],
        "to": "ANCIENT AND HONORABLE ARTILLERY CO OF MASSACHUSETTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MCALPIN",
          "HOTEL MC ALPIN"
        ],
        "to": "HOTEL MCALPIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MEYER'S HOTEL",
          "MEYERS HOTEL"
        ],
        "to": "MEYER'S HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY-PLAZA HOTEL",
          "COPLEY PLAZA HOTEL"
        ],
        "to": "COPLEY-PLAZA HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PACIFIC MAIL S.S. CO.",
          "PACIFIC MAIL SS CO."
        ],
        "to": "PACIFIC MAIL S.S. CO."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA S.S.NASUGA",
          "NIPPON YUSEN KAISHA S.S. NASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA S.S.NASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \"QUEEN MARY\"\"\"",
          "R.M.S. \\QUEEN MARY\\\"\""
        ],
        "to": "R.M.S. \"QUEEN MARY\"\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U. S. S. FLORIDA",
          "U.S.S. FLORIDA"
        ],
        "to": "U. S. S. FLORIDA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PACIFIC MAIL STEAMSHIP CO./TRANS PACIFIC LINE",
          "PACIFIC MAIL STEAMSHIP CO. TRANS PACIFIC LINE"
        ],
        "to": "PACIFIC MAIL STEAMSHIP CO./TRANS PACIFIC LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R.M.S. \\MAURETANIA\\\"\"",
          "R.M.S. MAURETANIA"
        ],
        "to": "R.M.S. \\MAURETANIA\\\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESTAURANT AND/OR LOCATION NOT GIVEN.",
          "RESTAURANT AND/OR LOCATION NOT GIVEN"
        ],
        "to": "RESTAURANT AND/OR LOCATION NOT GIVEN."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DU MUSEE",
          "HOTEL DU MUSEE'"
        ],
        "to": "HOTEL DU MUSEE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMERICA",
          "S.S.AMERICA"
        ],
        "to": "S.S. AMERICA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT & CAFE",
          "FLATIRON RESTAURANT & CAFE"
        ],
        "to": "FLAT IRON RESTAURANT & CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.M.S.PHILADELPHIA",
          "USMS PHILADELPHIA"
        ],
        "to": "U.S.M.S.PHILADELPHIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST. REGIS",
          "HOTEL ST.REGIS"
        ],
        "to": "HOTEL ST. REGIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER MENU, S. S. VADERLAND, MARCH 18TH, 1910.",
          "DINNER MENU, S.S. VADERLAND, MARCH 18TH, 1910."
        ],
        "to": "DINNER MENU, S. S. VADERLAND, MARCH 18TH, 1910."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIRATE'S HOUSE",
          "PIRATES' HOUSE"
        ],
        "to": "PIRATE'S HOUSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON HOTEL",
          "RITZ-CARLTON HOTEL"
        ],
        "to": "RITZ CARLTON HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MASTER PRINTERS' ASSOCIATION",
          "MASTER PRINTERS ASSOCIATION"
        ],
        "to": "MASTER PRINTERS' ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ENGINEERS CLUB",
          "ENGINEERS' CLUB"
        ],
        "to": "ENGINEERS CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. MINNETONKA",
          "S.S. \"MINNETONKA\"\"\""
        ],
        "to": "S.S. MINNETONKA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL CLUB OF ST. LOUIS",
          "COMMERCIAL CLUB OF ST.LOUIS"
        ],
        "to": "COMMERCIAL CLUB OF ST. LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COBBLE STONES",
          "THE COBBLESTONES"
        ],
        "to": "THE COBBLE STONES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE RENDEZ VOUS",
          "THE RENDEZ-VOUS"
        ],
        "to": "THE RENDEZ VOUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"FREDERIK VIII\"",
          "S.S. FREDERIK VIII"
        ],
        "to": "S.S. \"FREDERIK VIII\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRAUNCES' TAVERN",
          "FRAUNCES TAVERN"
        ],
        "to": "FRAUNCES' TAVERN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. UNITED STATES",
          "S. S. UNITED STATES"
        ],
        "to": "S.S. UNITED STATES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON",
          "RITZ-CARLTON"
        ],
        "to": "RITZ CARLTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. LOUIS CLUB",
          "ST.LOUIS CLUB"
        ],
        "to": "ST. LOUIS CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST. DENIS HOTEL",
          "ST, DENIS HOTEL"
        ],
        "to": "ST. DENIS HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MET-LIFE BUILDING",
          "METLIFE BUILDING"
        ],
        "to": "MET-LIFE BUILDING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT",
          "FLATIRON RESTAURANT"
        ],
        "to": "FLAT IRON RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DOWN TOWN CLUB",
          "DOWNTOWN CLUB"
        ],
        "to": "DOWN TOWN CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE MERCHANT'S CLUB OF CHICAGO",
          "THE MERCHANTS CLUB OF CHICAGO"
        ],
        "to": "THE MERCHANT'S CLUB OF CHICAGO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CENTRAL & HUDSON RIVER R.R.",
          "NEW YORK CENTRAL & HUDSON RIVER R.R.."
        ],
        "to": "NEW YORK CENTRAL & HUDSON RIVER R.R."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE ANTWERPEN NY",
          "RED STAR LINE ANTWERPEN.NY"
        ],
        "to": "RED STAR LINE ANTWERPEN NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CENTURY CLUB",
          "CENTURY CLUB?"
        ],
        "to": "CENTURY CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CUNARD STEAM SHIP COMPANY LIMITED",
          "CUNARD STEAMSHIP COMPANY LIMITED"
        ],
        "to": "CUNARD STEAM SHIP COMPANY LIMITED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH & MC NELL",
          "SMITH & MCNELL"
        ],
        "to": "SMITH & MC NELL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO STATIONERS ASSOCIATION",
          "CHICAGOS STATIONERS ASSOCIATION"
        ],
        "to": "CHICAGO STATIONERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. AMERICAN SHIPPER",
          "S.S. \"AMERICAN SHIPPER\"\"\""
        ],
        "to": "S.S. AMERICAN SHIPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"ILE DE FRANCE\"\"\"",
          "S.S. ILE DE FRANCE"
        ],
        "to": "S.S. \"ILE DE FRANCE\"\"\""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COSMOPOLITAN HOTEL",
          "COSMOPOLITAN... HOTEL"
        ],
        "to": "COSMOPOLITAN HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A.W. DENNETT",
          "A.W.DENNETT"
        ],
        "to": "A.W. DENNETT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "IMPERIAL YACHT CLUB OF ST. PETERSBURG",
          "IMPERIAL YACHT CLUB OF ST.PETERSBURG"
        ],
        "to": "IMPERIAL YACHT CLUB OF ST. PETERSBURG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S. ARMY SUBSISTENCE DEPT.",
          "US ARMY SUBSISTENCE DEPT."
        ],
        "to": "U.S. ARMY SUBSISTENCE DEPT."
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANCIENT ACCEPTED SCOTTISH RITE",
          "ANCIENT & ACCEPTED SCOTTISH RITE"
        ],
        "to": "ANCIENT ACCEPTED SCOTTISH RITE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COPLEY PLAZA",
          "HOTEL COPLEY-PLAZA"
        ],
        "to": "HOTEL COPLEY PLAZA"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column location_uncertain at index 47 based on column location_grel using expression jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "location_uncertain",
    "columnInsertIndex": 47,
    "baseColumnName": "location_grel",
    "expression": "jython:if '?' in value:\n    return 1\nelse:\n    return 0",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column location_type",
    "columnName": "location_type"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column currency using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "currency",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column currency_case at index 50 based on column currency using expression jython:return value.upper()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "currency_case",
    "columnInsertIndex": 50,
    "baseColumnName": "currency",
    "expression": "jython:return value.upper()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column page_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "page_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column dish_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dish_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]